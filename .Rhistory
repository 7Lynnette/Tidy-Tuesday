tidy()) %>%
rename("lower" = 7,
"upper" = 8) %>%
ggplot(aes(x = reorder(term, estimate), y = estimate)) +
geom_pointrange(aes(ymin = lower, ymax = upper)) +
coord_flip() +
xlab("")
logistic_model %>%
tidy() %>%
bind_cols(logistic_model %>%
confint() %>%
tidy()) %>%
rename("lower" = 7,
"upper" = 8) %>%
filter(term != "(Intercept)") %>%
ggplot(aes(x = reorder(term, estimate), y = estimate)) +
geom_pointrange(aes(ymin = lower, ymax = upper)) +
coord_flip() +
xlab("")
logistic_model %>%
tidy() %>%
bind_cols(logistic_model %>%
confint() %>%
tidy()) %>%
rename("lower" = 7,
"upper" = 8) %>%
filter(term != "(Intercept)") %>%
ggplot(aes(x = reorder(term, -estimate), y = estimate)) +
geom_pointrange(aes(ymin = lower, ymax = upper)) +
coord_flip() +
xlab("")
logistic_model %>%
tidy() %>%
bind_cols(logistic_model %>%
confint() %>%
tidy()) %>%
rename("lower" = 7,
"upper" = 8) %>%
filter(term != "(Intercept)") %>%
ggplot(aes(x = reorder(term, -estimate), y = estimate)) +
geom_errorbar(aes(ymin = lower, ymax = upper)) +
geom_point() +
coord_flip() +
xlab("")
#Weight plot
logistic_model %>%
tidy() %>%
bind_cols(logistic_model %>%
confint() %>%
tidy()) %>%
rename("lower" = 7,
"upper" = 8) %>%
filter(term != "(Intercept)") %>%
ggplot(aes(x = reorder(term, -estimate), y = estimate)) +
geom_errorbar(aes(ymin = lower, ymax = upper)) +
geom_point() +
coord_flip() +
xlab("")
logistic_model
logistic_model %>% augment()
ames_df
ames_df %>%
select_if(is.numeric)
ames_df %>%
select_if(is.numeric) %>%
select(Sale_Price, everything())
ames_df %>%
select_if(is.numeric) %>%
select(Sale_Price, everything()) %>%
lm(Sale_Price~., data = .)
ames_df %>%
select_if(is.numeric) %>%
select(Sale_Price, everything()) %>%
lm(Sale_Price~., data = .) %>%
tidy()
ames_df %>%
select_if(is.numeric) %>%
select(Sale_Price, everything()) %>%
lm(Sale_Price~., data = .) %>%
tidy(conf.int = TRUE) %>%
ggplot
ames_df %>%
select_if(is.numeric) %>%
select(Sale_Price, everything()) %>%
lm(Sale_Price~., data = .) %>%
tidy(conf.int = TRUE)
ames_df %>%
select_if(is.numeric) %>%
select(Sale_Price, everything()) %>%
lm(Sale_Price~., data = .) %>%
tidy(conf.int = TRUE) %>%
ggplot(aes(x = term, y = estimate)) +
geom_errorbar(aes(ymin = conf.low, ymax = conf.high)) +
geom_point()
ames_df %>%
select_if(is.numeric) %>%
select(Sale_Price, everything()) %>%
lm(Sale_Price~., data = .) %>%
tidy(conf.int = TRUE) %>%
ggplot(aes(x = term, y = estimate)) +
geom_errorbar(aes(ymin = conf.low, ymax = conf.high)) +
geom_point() +
coord_flip()
ames_df %>%
select_if(is.numeric) %>%
select(Sale_Price, everything()) %>%
lm(Sale_Price~., data = .) %>%
tidy(conf.int = TRUE)
ames_df %>%
select_if(is.numeric) %>%
select(Sale_Price, everything()) %>%
lm(Sale_Price~., data = .) %>%
tidy(conf.int = TRUE) %>%
slice(-1)
ames_df %>%
select_if(is.numeric) %>%
select(Sale_Price, everything()) %>%
lm(Sale_Price~., data = .) %>%
tidy(conf.int = TRUE) %>%
slice(-1) %>%
ggplot(aes(x = term, y = estimate)) +
geom_errorbar(aes(ymin = conf.low, ymax = conf.high)) +
geom_point() +
coord_flip()
options(scipen = 999)
ames_df %>%
select_if(is.numeric) %>%
select(Sale_Price, everything()) %>%
lm(Sale_Price~., data = .) %>%
tidy(conf.int = TRUE) %>%
slice(-1) %>%
ggplot(aes(x = term, y = estimate)) +
geom_errorbar(aes(ymin = conf.low, ymax = conf.high)) +
geom_point() +
coord_flip()
ames_df
ames_df
ames_df <- ames_df %>%
select_if(is.numeric) %>%
select(Sale_Price, everything())
library(tidyverse)
library(tidymodels)
library(iml)
library(AmesHousing)
library(broom)
options(scipen = 999)
ames_df <- make_ames()
ames_df <- ames_df %>%
select_if(is.numeric) %>%
select(Sale_Price, everything())
linear_model <- lm(Sale_Price~., data = ames_df)
linear_model %>%
tidy(conf.int = TRUE) %>%
slice(-1) %>%
ggplot(aes(x = term, y = estimate)) +
geom_errorbar(aes(ymin = conf.low, ymax = conf.high)) +
geom_point() +
coord_flip()
ames_df <- ames_df %>%
select_if(is.numeric) %>%
select(Sale_Price, everything(), -Latitude, -Longitude)
linear_model <- lm(Sale_Price~., data = ames_df)
linear_model %>%
tidy(conf.int = TRUE) %>%
slice(-1) %>%
ggplot(aes(x = term, y = estimate)) +
geom_errorbar(aes(ymin = conf.low, ymax = conf.high)) +
geom_point() +
coord_flip()
ames_df <- ames_df %>%
select_if(is.numeric) %>%
select(Sale_Price, everything())
linear_model <- lm(Sale_Price~., data = ames_df)
linear_model %>%
tidy(conf.int = TRUE) %>%
slice(-1) %>%
ggplot(aes(x = term, y = estimate)) +
geom_errorbar(aes(ymin = conf.low, ymax = conf.high)) +
geom_point() +
coord_flip()
linear_model
linear_model %>%
tidy()
ames_df
ames_df %>%
mutate(key = row_number())
ames_df %>%
mutate(pk = row_number()) %>%
gather(key = "key", value = "value", -pk)
linear_model %>%
tidy()
ames_df %>%
mutate(pk = row_number()) %>%
gather(key = "key", value = "value", -pk)
linear_model %>%
tidy()
ames_df %>%
mutate(pk = row_number()) %>%
gather(key = "key", value = "value", -pk) %>%
left_join(linear_model %>% tidy(),
by = "key" = term)
ames_df %>%
mutate(pk = row_number()) %>%
gather(key = "key", value = "value", -pk) %>%
left_join(linear_model %>% tidy(),
by = "key" = "term")
ames_df %>%
mutate(pk = row_number()) %>%
gather(key = "key", value = "value", -pk) %>%
left_join(linear_model %>% tidy(),
by = c("key", "term"))
linear_model %>%
tidy()
ames_df %>%
mutate(pk = row_number()) %>%
gather(key = "key", value = "value", -pk) %>%
left_join(linear_model %>% tidy(),
by = c("key" = "term"))
linear_model %>% tidy(),
linear_model %>% tidy()
ames_df %>%
mutate(pk = row_number()) %>%
gather(key = "key", value = "value", -pk)
ames_df %>%
mutate(pk = row_number()) %>%
gather(key = "key", value = "value", -pk) %>%
count(key)
ames_df %>%
mutate(pk = row_number()) %>%
gather(key = "key", value = "value", -pk)
linear_model
linear_model %>% tidy()
linear_model %>%
tidy() %>%
select(term, estimate)
ames_df %>%
mutate(pk = row_number()) %>%
gather(key = "key", value = "value", -pk)
linear_model %>%
tidy() %>%
select(term, estimate)
ames_df %>%
mutate(pk = row_number()) %>%
select(-Sale_Price)
ames_df %>%
mutate(pk = row_number()) %>%
select(-Sale_Price) %>%
gather(key = "key", value = "value", -pk)
ames_df %>%
mutate(pk = row_number()) %>%
select(-Sale_Price) %>%
gather(key = "key", value = "value", -pk) %>%
left_join(linear_model %>% tidy() %>% select(term, estimate),
by = c("key" = "term"))
ames_df %>%
mutate(pk = row_number()) %>%
select(-Sale_Price) %>%
gather(key = "key", value = "value", -pk) %>%
left_join(linear_model %>% tidy() %>% select(term, estimate),
by = c("key" = "term")) %>%
mutate(effect = value * estimate)
ames_df %>%
mutate(pk = row_number()) %>%
select(-Sale_Price) %>%
gather(key = "key", value = "value", -pk) %>%
left_join(linear_model %>% tidy() %>% select(term, estimate),
by = c("key" = "term")) %>%
mutate(effect = value * estimate) %>%
spread(key = "key", value = "value", -pk, -effect)
ames_df %>%
mutate(pk = row_number()) %>%
select(-Sale_Price) %>%
gather(key = "key", value = "value", -pk) %>%
left_join(linear_model %>% tidy() %>% select(term, estimate),
by = c("key" = "term")) %>%
mutate(effect = value * estimate)
ames_df %>%
mutate(pk = row_number()) %>%
select(-Sale_Price) %>%
gather(key = "key", value = "value", -pk) %>%
left_join(linear_model %>% tidy() %>% select(term, estimate),
by = c("key" = "term")) %>%
mutate(effect = value * estimate) %>%
select(-estimate, -value)
ames_df %>%
mutate(pk = row_number()) %>%
select(-Sale_Price) %>%
gather(key = "key", value = "value", -pk) %>%
left_join(linear_model %>% tidy() %>% select(term, estimate),
by = c("key" = "term")) %>%
mutate(effect = value * estimate) %>%
select(-estimate, -value) %>%
spread(key = "key", value = "effect", -pk)
ames_df %>%
mutate(pk = row_number()) %>%
select(-Sale_Price) %>%
gather(key = "key", value = "value", -pk) %>%
left_join(linear_model %>% tidy() %>% select(term, estimate),
by = c("key" = "term")) %>%
mutate(effect = value * estimate) %>%
select(-estimate, -value) %>%
spread(key = "key", value = "effect")
ames_df %>%
mutate(pk = row_number()) %>%
select(-Sale_Price) %>%
gather(key = "key", value = "value", -pk) %>%
left_join(linear_model %>% tidy() %>% select(term, estimate),
by = c("key" = "term")) %>%
mutate(effect = value * estimate) %>%
select(-estimate, -value)
ames_df %>%
mutate(pk = row_number()) %>%
select(-Sale_Price) %>%
gather(key = "key", value = "value", -pk) %>%
left_join(linear_model %>% tidy() %>% select(term, estimate),
by = c("key" = "term")) %>%
mutate(effect = value * estimate)
ames_df %>%
mutate(pk = row_number()) %>%
select(-Sale_Price) %>%
gather(key = "key", value = "value", -pk) %>%
left_join(linear_model %>% tidy() %>% select(term, estimate),
by = c("key" = "term")) %>%
mutate(effect = value * estimate) %>%
ggplot(aes(x = key, y = effect)) +
geom_boxplot() +
coord_flip()
ames_df %>%
mutate(pk = row_number()) %>%
select(-Sale_Price) %>%
gather(key = "key", value = "value", -pk) %>%
left_join(linear_model %>% tidy() %>% select(term, estimate),
by = c("key" = "term")) %>%
mutate(effect = value * estimate) %>%
mutate(pos_neg = if_else(effect <= 0, "Negative", "Positive"),
effect = abs(effect)) %>%
ggplot(aes(x = key, y = effect, color = pos_neg)) +
geom_boxplot() +
coord_flip()
ames_df %>%
mutate(pk = row_number()) %>%
select(-Sale_Price) %>%
gather(key = "key", value = "value", -pk) %>%
left_join(linear_model %>% tidy() %>% select(term, estimate),
by = c("key" = "term")) %>%
mutate(effect = value * estimate) %>%
mutate(pos_neg = if_else(effect <= 0, "Negative", "Positive"),
effect = abs(effect)) %>%
ggplot(aes(x = key, y = effect, color = pos_neg)) +
geom_boxplot() +
scale_y_log10() +
coord_flip()
#Effect plot
ames_df %>%
mutate(pk = row_number()) %>%
select(-Sale_Price) %>%
gather(key = "key", value = "value", -pk) %>%
left_join(linear_model %>% tidy() %>% select(term, estimate),
by = c("key" = "term")) %>%
mutate(effect = value * estimate,
pos_neg = if_else(effect <= 0, "Negative", "Positive"),
effect = abs(effect)) %>%
ggplot(aes(x = key, y = effect, color = pos_neg)) +
geom_boxplot() +
scale_y_log10() +
coord_flip()
#Effect plot
ames_df %>%
mutate(pk = row_number()) %>%
select(-Sale_Price) %>%
gather(key = "key", value = "value", -pk) %>%
left_join(linear_model %>% tidy() %>% select(term, estimate),
by = c("key" = "term")) %>%
mutate(effect = value * estimate,
pos_neg = if_else(effect <= 0, "Negative", "Positive"),
effect = abs(effect)) %>%
ggplot(aes(x = key, y = effect, color = pos_neg)) +
geom_boxplot() +
scale_y_log10() +
coord_flip() +
facet_wrap(~pos_neg, scales = "free")
#Effect plot
ames_df %>%
mutate(pk = row_number()) %>%
select(-Sale_Price) %>%
gather(key = "key", value = "value", -pk) %>%
left_join(linear_model %>% tidy() %>% select(term, estimate),
by = c("key" = "term")) %>%
mutate(effect = value * estimate,
pos_neg = if_else(effect <= 0, "Negative", "Positive"),
effect = abs(effect)) %>%
ggplot(aes(x = key, y = effect, color = pos_neg)) +
geom_boxplot() +
scale_y_log10() +
coord_flip()
ames_df
random_forest_model <- rand_forest() %>%
set_mode("regression")
xgb_model <- boost_tree() %>%
set_mode("regression") %>%
set_encoding("XGBoost")
xgb_model <- boost_tree() %>%
set_mode("regression") %>%
set_encoding("xgboost")
xgb_model <- boost_tree() %>%
set_mode("regression") %>%
set_engine("xgboost")
random_forest_model <- rand_forest() %>%
set_mode("regression") %>%
set_engine("randomForest")
random_forest_model <- rand_forest() %>%
set_mode("regression") %>%
set_engine("randomForest", seed = 250)
xgb_model <- boost_tree() %>%
set_mode("regression") %>%
set_engine("xgboost", seed = 250)
install.packages("randomForest")
install.packages("XGBoost")
install.packages("xgboost")
random_forest_model %>%
fit(Sale_Price~., data = ames_df)
random_forest_model <- random_forest_model %>%
fit(Sale_Price~., data = ames_df)
random_forest_model
xgb_model <- xgb_model %>%
fit(Sale_Price~., data = ames_df)
#Create models
random_forest_model <- rand_forest() %>%
set_mode("regression") %>%
set_engine("randomForest")
xgb_model <- boost_tree() %>%
set_mode("regression") %>%
set_engine("xgboost")
#Create models
random_forest_model <- rand_forest() %>%
set_mode("regression") %>%
set_engine("randomForest")
xgb_model <- boost_tree() %>%
set_mode("regression") %>%
set_engine("xgboost")
#Train models
set.seed(42)
random_forest_model <- random_forest_model %>%
fit(Sale_Price~., data = ames_df)
xgb_model <- xgb_model %>%
fit(Sale_Price~., data = ames_df)
xgb_model
xgb_model
xgb_model %>% summary()
xgb_model
View(logistic_model)
View(linear_model)
predict(random_forest_model, ames_df)
names(ames_df)
names(ames_df %>% select(-Sale_Price))
X <- names(ames_df %>% select(-Sale_Price))
predictor <- Predictor$new(random_forest_model, data = X, y = ames_df$Sale_Price)
X <- names(ames_df %>% select(-Sale_Price)) %>% as.data.frame()
predictor <- Predictor$new(random_forest_model, data = X, y = ames_df$Sale_Price)
X
ames_df
ames_df %>% as.data.frame()
test <- as.data.frame(ames_df)
test
test[which(names(test) != "Sale_Price")]
X <- ames_df %>% select(-Sale_Price) %>% as.data.frame()
predictor <- Predictor$new(random_forest_model, data = X, y = ames_df$Sale_Price)
predictor
predictor <- Predictor$new(random_forest_model, data = x_data, y = ames_df$Sale_Price)
x_data <- ames_df %>% select(-Sale_Price) %>% as.data.frame()
predictor <- Predictor$new(random_forest_model, data = x_data, y = ames_df$Sale_Price)
predictor
FeatureImp$new(predictor, loss = "mae")
feature_importance <- FeatureImp$new(predictor, loss = "mae")
feature_importance
feature_importance %>% plot()
ale_plot <- FeatureEffect$new(predictor)
ale_plot <- FeatureEffects$new(predictor)
ale_plot
ale_plot %>% plot()
#ALE plot (Accumulated Local Effects Plot)
install.packages("patchwork")
ale_plot %>% plot()
ale_plot %>% plot()
decision_tree_surrogate <- TreeSurrogate$new(predictor, maxdepth = 2)
#Using a surrogate model to explain the black box model
install.packages("partykit")
#Using a surrogate model to explain the black box model
#install.packages("partykit")
decision_tree_surrogate <- TreeSurrogate$new(predictor, maxdepth = 2)
plot(tree)
#Using a surrogate model to explain the black box model
#install.packages("partykit")
decision_tree_surrogate <- TreeSurrogate$new(predictor, maxdepth = 2)
plot(decision_tree_surrogate)
lime <- LocalModel$new(predictor, x.interest = x_data[1,])
install.packages("glmnet")
#Using LIME model
lime <- LocalModel$new(predictor, x.interest = x_data[1,])
plot(lime)
lime
plot(lime)
rf_predictor <- Predictor$new(random_forest_model, data = x_data, y = ames_df$Sale_Price)
xgb_predictor <- Predictor$new(xgb_model, data = x_data, y = ames_df$Sale_Price)
feature_importance <- FeatureImp$new(rf_predictor, loss = "mae")
feature_importance <- FeatureImp$new(rf_predictor, loss = "mae")
feature_importance %>% plot(
feature_importance %>% plot()
feature_importance %>% plot()
feature_importance %>% plot()
feature_importance <- FeatureImp$new(xgb_predictor, loss = "mae")
feature_importance %>% plot()

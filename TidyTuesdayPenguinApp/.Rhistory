"body_mass_g" = 1,
"sex" = "female"),
type = "prob") %>%
gather()
predict(model,tibble("island" = "Biscoe",
"bill_length_mm" = 1,
"bill_depth_mm" = 1,
"flipper_length_mm" = 1,
"body_mass_g" = 1,
"sex" = "female"),
type = "prob") %>%
gather() %>%
arrange(value)
predict(model,tibble("island" = "Biscoe",
"bill_length_mm" = 1,
"bill_depth_mm" = 1,
"flipper_length_mm" = 1,
"body_mass_g" = 1,
"sex" = "female"),
type = "prob") %>%
gather() %>%
arrange(desc(value))
predict(model,tibble("island" = "Biscoe",
"bill_length_mm" = 1,
"bill_depth_mm" = 1,
"flipper_length_mm" = 1,
"body_mass_g" = 1,
"sex" = "female"),
type = "prob") %>%
gather() %>%
arrange(desc(value)) %>%
slice(1)
predict(model,tibble("island" = "Biscoe",
"bill_length_mm" = 1,
"bill_depth_mm" = 1,
"flipper_length_mm" = 1,
"body_mass_g" = 1,
"sex" = "female"))
predict(model,tibble("island" = "Biscoe",
"bill_length_mm" = 1,
"bill_depth_mm" = 1,
"flipper_length_mm" = 1,
"body_mass_g" = 1,
"sex" = "female"),
type = "prob") %>%
gather() %>%
arrange(desc(value)) %>%
slice(1)
runApp('Penguin_App')
runApp('Penguin_App')
runApp('Penguin_App')
runApp('Penguin_App')
palmerpenguins::penguins %>% summary()
predict(model,tibble("island" = "Biscoe",
"bill_length_mm" = 1,
"bill_depth_mm" = 1,
"flipper_length_mm" = 1,
"body_mass_g" = 1,
"sex" = "female"),
type = "prob") %>%
gather() %>%
arrange(desc(value)) %>%
slice(1)
runApp('Penguin_App')
runApp('Penguin_App')
runApp('Penguin_App')
runApp('Penguin_App')
runApp('Penguin_App')
runApp('Penguin_App')
runApp('Penguin_App')
runApp('Penguin_App')
runApp('Penguin_App')
runApp('Penguin_App')
runApp('Penguin_App')
runApp('Penguin_App')
runApp('Penguin_App')
model$pre$mold$outcomes
model$pre$mold$outcomes %>% distinct()
runApp('Penguin_App')
runApp('Penguin_App')
runApp('Penguin_App')
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(tidymodels)
library(palmerpenguins)
palmerpenguins::penguins
penguins %>%
count(species)
penguins %>% summary()
penguins %>%
mutate(row_num = row_number()) %>%
gather(key = "key", value = "value", -row_num)
penguins %>%
mutate(row_num = row_number()) %>%
gather(key = "key", value = "value", -row_num) %>%
filter(value %>% is.na())
penguins %>%
mutate(row_num = row_number()) %>%
gather(key = "key", value = "value", -row_num) %>%
filter(value %>% is.na()) %>%
count(row_num, sort = TRUE)
penguins %>%
mutate(row_num = row_number()) %>%
gather(key = "key", value = "value", -row_num) %>%
filter(value %>% is.na()) %>%
count(row_num, sort = TRUE) %>%
slice(1:2)
penguins %>%
mutate(row_num = row_number()) %>%
gather(key = "key", value = "value", -row_num) %>%
filter(value %>% is.na()) %>%
count(row_num, sort = TRUE) %>%
slice(1:2) %>%
select(row_num)
rows_to_remove <- penguins %>%
mutate(row_num = row_number()) %>%
gather(key = "key", value = "value", -row_num) %>%
filter(value %>% is.na()) %>%
count(row_num, sort = TRUE) %>%
slice(1:2) %>%
select(row_num)
#Remove rows that have too many na's
penguins %>%
mutate(row_num = row_number())
#Remove rows that have too many na's
penguins %>%
mutate(row_num = row_number()) %>%
anti_join(rows_to_remove, by = "row_num")
penguins
rows_to_remove
#Remove rows that have too many na's
penguins %>%
mutate(row_num = row_number()) %>%
anti_join(rows_to_remove, by = "row_num")
#Remove rows that have too many na's
penguins %>%
mutate(row_num = row_number()) %>%
anti_join(rows_to_remove, by = "row_num") %>%
select(-row_num)
#Remove rows that have too many na's
penguins <- penguins %>%
mutate(row_num = row_number()) %>%
anti_join(rows_to_remove, by = "row_num") %>%
select(-row_num)
penguins %>% summary()
penguins
penguins %>%
select(-species, -island) %>%
gather(key = "key", value = "value", -sex)
penguins %>%
select(-species, -island) %>%
gather(key = "key", value = "value", -sex) %>%
ggplot(aes(x = sex, y = value)) +
geom_boxplot() +
facet_wrap(~key, scales = "free")
penguins %>%
select(-species, -island) %>%
gather(key = "key", value = "value", -sex) %>%
ggplot(aes(x = sex, y = value, color = sex)) +
geom_boxplot() +
facet_wrap(~key, scales = "free")
penguins %>%
gather(key = "key", value = "value", -sex, -species, -island) %>%
ggplot(aes(x = sex, y = value, color = sex)) +
geom_boxplot() +
facet_wrap(~key, scales = "free")
penguins %>%
gather(key = "key", value = "value", -sex, -species, -island) %>%
ggplot(aes(x = species, y = value, color = sex)) +
geom_boxplot() +
facet_wrap(~key, scales = "free")
#Examine distributions
penguins
#Examine distributions
penguins %>%
select(bill_length_mm:body_mass_g)
#Examine distributions
penguins %>%
select(bill_length_mm:body_mass_g) %>%
pivot_longer()
#Examine distributions
penguins %>%
select(bill_length_mm:body_mass_g) %>%
gather()
#Examine distributions
penguins %>%
select(bill_length_mm:body_mass_g) %>%
gather() %>%
ggplot(aes(x = value, color = key)) +
geom_density() +
facet_wrap(~key, scales = "free")
#Rsample pacakge example
tidy_split <- initial_split(penguins, prop = .8)
tidy_train <- training(tidy_split)
tidy_test <- testing(tidy_split)
tidy_kfolds <- vfold_cv(tidy_train)
#Rsample pacakge example
## Create the train and test sets using Rsample
tidy_split <- initial_split(penguins, prop = .8)
tidy_train <- training(tidy_split)
tidy_test <- testing(tidy_split)
tidy_kfolds <- vfold_cv(tidy_train)
#Rsample pacakge example
## Create the train and test sets using Rsample
set.seed(42)
tidy_split <- initial_split(penguins, prop = .8)
tidy_train <- training(tidy_split)
tidy_test <- testing(tidy_split)
tidy_kfolds <- vfold_cv(tidy_train)
recipe(species~., data = tidy_train) %>%
step_knnimpute("sex") %>%
step_dummy(all_nominal(), -all_outcomes()) %>%
step_medianimpute(all_predictors()) %>%
step_normalize(all_predictors())
recipe(species~., data = tidy_train) %>%
step_knnimpute("sex") %>%
step_dummy(all_nominal(), -all_outcomes()) %>%
step_medianimpute(all_predictors()) %>%
step_normalize(all_predictors()) %>%
prep()
tidy_rec <- recipe(species~., data = tidy_train) %>%
step_knnimpute("sex") %>%
step_dummy(all_nominal(), -all_outcomes()) %>%
step_medianimpute(all_predictors()) %>%
step_normalize(all_predictors())
tidy_boosed_model <- boost_tree(trees = tune(),
min_n = tune(),
learn_rate = tune()) %>%
set_mode("classification") %>%
set_engine("xgboost")
tidy_knn_model <- nearest_neighbor(neighbors = tune()) %>%
set_mode("classification") %>%
set_engine("kknn")
# Dials pacakge
parameters(tidy_boosed_model)
# Dials pacakge
grid_regular(parameters(tidy_boosed_model), levels = 10)
# Dials pacakge
grid_regular(parameters(tidy_boosed_model), levels = 5)
# Dials pacakge
boosted_grid <- grid_regular(parameters(tidy_boosed_model), levels = 5)
knn_grid <- grid_regular(parameters(tidy_knn_model), levels = 10)
# Dials creates the parameter grids
# Tune applies the parameter grid to the models
# Dials pacakge
boosted_grid <- grid_regular(parameters(tidy_boosed_model), levels = 5)
knn_grid <- grid_regular(parameters(tidy_knn_model), levels = 10)
# Tune pacakge
boosted_tune <- tune_grid(tidy_boosed_model,
tidy_rec,
resamples = tidy_kfolds,
grid = boosted_grid)
knn_tune <- tune_grid(tidy_knn_model,
tidy_rec,
resamples = tidy_kfolds,
grid = knn_grid)
boosted_tune
boosted_tune %>% select_best("accuracy")
boosted_tune %>% select_best("roc_auc")
boosted_tune %>% select_best("accuracy")
boosted_tune %>% select_best("roc_auc")
boosted_param <- boosted_tune %>% select_best("roc_auc")
knn_param <- knn_tune %>% select_best("roc_auc")
#Apply parameters to the models
finalize_model(tidy_boosed_model, boosted_param)
tidy_knn_model <- finalize_model(tidy_knn_model, knn_param)
# Workflow package
boosted_wf <- workflow() %>%
add_model(tidy_boosed_model) %>%
add_recipe(tidy_rec)
knn_wf <- workflow() %>%
add_model(tidy_knn_model) %>%
add_recipe(tidy_rec)
boosted_res <- last_fit(boosted_wf, tidy_split)
boosted_res <- last_fit(boosted_wf, tidy_split)
# Workflow package
# For combining model, parameters, and preprocessing
boosted_wf <- workflow() %>%
add_model(tidy_boosed_model) %>%
add_recipe(tidy_rec)
knn_wf <- workflow() %>%
add_model(tidy_knn_model) %>%
add_recipe(tidy_rec)
boosted_res <- last_fit(boosted_wf, tidy_split)
#Use Tune package to extract best parameters using ROC_AUC handtill
boosted_param <- boosted_tune %>% select_best("roc_auc")
knn_param <- knn_tune %>% select_best("roc_auc")
#Apply parameters to the models
tidy_boosed_model <- finalize_model(tidy_boosed_model, boosted_param)
tidy_knn_model <- finalize_model(tidy_knn_model, knn_param)
tidy_boosted_model <- boost_tree(trees = tune(),
min_n = tune(),
learn_rate = tune()) %>%
set_mode("classification") %>%
set_engine("xgboost")
# Dials pacakge
boosted_grid <- grid_regular(parameters(tidy_boosted_model), levels = 5)
#Apply parameters to the models
tidy_boosted_model <- finalize_model(tidy_boosted_model, boosted_param)
# Workflow package
# For combining model, parameters, and preprocessing
boosted_wf <- workflow() %>%
add_model(tidy_boosed_model) %>%
add_recipe(tidy_rec)
knn_wf <- workflow() %>%
add_model(tidy_knn_model) %>%
add_recipe(tidy_rec)
boosted_res <- last_fit(boosted_wf, tidy_split)
knn_res <- last_fit(knn_wf, tidy_split)
bind_rows(
boosted_res %>% mutate(model = "xgb"),
knn_res %>% mutate(model = "knn")
)
bind_rows(
boosted_res %>% mutate(model = "xgb"),
knn_res %>% mutate(model = "knn")
) %>%
unnest(.metrics)
boosted_res
boosted_res %>% unnest(.predictions)
boosted_res %>% unnest(.predictions) %>%
conf_mat(truth = species, estimate = .pred_class)
knn_res %>% unnest(.predictions) %>%
conf_mat(truth = species, estimate = .pred_class)
# Fit the entire data set using the final wf
final_boosted_model <- fit(boosted_wf, penguins)
setwd("E:/School/R Work/Tidy Tuesday")
saveRDS(final_boosted_model, "penguin_model.rds")
setwd("E:/School/R Work/Tidy Tuesday/TidyTuesdayPenguinApp")
library(shiny)
library(shinydashboard)
library(tidymodels)
library(tidyverse)
model <- readRDS("penguin_model.rds")
runApp()
model$pre$mold$predictors
model$pre$mold$predictors %>% view()
model$pre$mold$predictors %>% colnames()
library(palmerpenguins)
penguins %>% select(island) %>% distinct()
penguins %>% select(sex) %>% distinct()
model$pre$mold$predictors %>% colnames()
penguins %>% summary()
runApp()
penguins %>% summary()
predict(
model,
tibble("island" = "Biscoe",
"bill_length_mm" = 12,
"bill_depth_mm" = 23,
"flipper_length_mm" = 23,
"body_mass_g" = 23,
"sex" = "Male"),
type = 'prob'
)
predict(
model,
tibble("island" = "Biscoe",
"bill_length_mm" = 12,
"bill_depth_mm" = 23,
"flipper_length_mm" = 23,
"body_mass_g" = 23,
"sex" = "Male"),
type = 'prob'
) %>%
gather()
predict(
model,
tibble("island" = "Biscoe",
"bill_length_mm" = 12,
"bill_depth_mm" = 23,
"flipper_length_mm" = 23,
"body_mass_g" = 23,
"sex" = "Male"),
type = 'prob'
) %>%
gather() %>%
arrange(desc(value))
predict(
model,
tibble("island" = "Biscoe",
"bill_length_mm" = 12,
"bill_depth_mm" = 23,
"flipper_length_mm" = 23,
"body_mass_g" = 23,
"sex" = "Male"),
type = 'prob'
) %>%
gather() %>%
arrange(desc(value)) %>%
slice(1) %>%
select(value)
predict(
model,
tibble("island" = "Biscoe",
"bill_length_mm" = 12,
"bill_depth_mm" = 23,
"flipper_length_mm" = 23,
"body_mass_g" = 23,
"sex" = "Male")
)
penguins %>% select(species) %>% distinct()
runApp()
runApp()
runApp()
knitr::opts_chunk$set(echo = TRUE)
#remotes::install_github("allisonhorst/palmerpenguins")
library(tidyverse)
library(tidymodels)
library(palmerpenguins)
palmerpenguins::penguins
#Species has some imbalances
penguins %>%
count(species)
#Check how many NA's for each row
rows_to_remove <- penguins %>%
mutate(row_num = row_number()) %>%
gather(key = "key", value = "value", -row_num) %>%
filter(value %>% is.na()) %>%
count(row_num, sort = TRUE) %>%
slice(1:2) %>%
select(row_num)
#Remove rows that have too many na's
penguins <- penguins %>%
mutate(row_num = row_number()) %>%
anti_join(rows_to_remove, by = "row_num") %>%
select(-row_num)
#Check column nas
penguins %>% summary()
#Male and female have different sizes in features, can probably impute missing with Knn
penguins %>%
gather(key = "key", value = "value", -sex, -species, -island) %>%
ggplot(aes(x = species, y = value, color = sex)) +
geom_boxplot() +
facet_wrap(~key, scales = "free")
#Examine distributions
## Probably need to center and scale
penguins %>%
select(bill_length_mm:body_mass_g) %>%
gather() %>%
ggplot(aes(x = value, color = key)) +
geom_density() +
facet_wrap(~key, scales = "free")
#Rsample pacakge example
## Create the train and test sets using Rsample
set.seed(42)
tidy_split <- initial_split(penguins, prop = .8)
tidy_train <- training(tidy_split)
tidy_test <- testing(tidy_split)
tidy_kfolds <- vfold_cv(tidy_train)
#Recipes package
## For preprocessing, feature engineering, and feature elimination
tidy_rec <- recipe(species~., data = tidy_train) %>%
step_knnimpute("sex") %>%
step_dummy(all_nominal(), -all_outcomes()) %>%
step_medianimpute(all_predictors()) %>%
step_normalize(all_predictors())
# Parsnip package
## Standardized api for creating models
tidy_boosted_model <- boost_tree(trees = tune(),
min_n = tune(),
learn_rate = tune()) %>%
set_mode("classification") %>%
set_engine("xgboost")
tidy_knn_model <- nearest_neighbor(neighbors = tune()) %>%
set_mode("classification") %>%
set_engine("kknn")
# Dials creates the parameter grids
# Tune applies the parameter grid to the models
# Dials pacakge
boosted_grid <- grid_regular(parameters(tidy_boosted_model), levels = 5)
knn_grid <- grid_regular(parameters(tidy_knn_model), levels = 10)
# Tune pacakge
boosted_tune <- tune_grid(tidy_boosted_model,
tidy_rec,
resamples = tidy_kfolds,
grid = boosted_grid)
knn_tune <- tune_grid(tidy_knn_model,
tidy_rec,
resamples = tidy_kfolds,
grid = knn_grid)
#Use Tune package to extract best parameters using ROC_AUC handtill
boosted_param <- boosted_tune %>% select_best("roc_auc")
knn_param <- knn_tune %>% select_best("roc_auc")
#Apply parameters to the models
tidy_boosted_model <- finalize_model(tidy_boosted_model, boosted_param)
tidy_knn_model <- finalize_model(tidy_knn_model, knn_param)
# Workflow package
# For combining model, parameters, and preprocessing
boosted_wf <- workflow() %>%
add_model(tidy_boosted_model) %>%
add_recipe(tidy_rec)
knn_wf <- workflow() %>%
add_model(tidy_knn_model) %>%
add_recipe(tidy_rec)
# Yardstick package
# For extracting metrics from the model
boosted_res <- last_fit(boosted_wf, tidy_split)
knn_res <- last_fit(knn_wf, tidy_split)
bind_rows(
boosted_res %>% mutate(model = "xgb"),
knn_res %>% mutate(model = "knn")
) %>%
unnest(.metrics)
boosted_res %>% unnest(.predictions) %>%
conf_mat(truth = species, estimate = .pred_class)
# Fit the entire data set using the final wf
final_boosted_model <- fit(boosted_wf, penguins)
saveRDS(final_boosted_model, "penguin_model.rds")
boosted_param
boosted_tune
boosted_tune %>% pull(.notes)

pivot_wider(names_from = "model_name", values_from = .estimate)
library(tidyposterior)
roc_model <- perf_mod(model_pos, seed = 2020)
roc_model$stan
roc_model %>% tidy()
roc_model %>% tidy() %>%
ggplot(aes(x = model, y = statistic)) +
geom_point()
contrast_models(roc_model, "logistic", "XGBoost")
contrast_models(roc_model, "logistic", "XGBoost") %>% ggplot()
roc_model %>% tidy() %>%
ggplot(aes(x = model, y = statistic))
contrast_models(roc_model, "logistic", "XGBoost") %>%
ggplot()
roc_model %>% tidy() %>%
ggplot(aes(x = model, y = statistic)) +
geom_point()
roc_model$hetero_var
roc_model$names
roc_model$rset_type
roc_model$transform
roc_model
roc_model %>% tidy()
contrast_models(roc_model, "logistic", "XGBoost")
knitr::opts_chunk$set(echo = TRUE)
library(tidymodels)
library(tidyverse)
df <- read_csv("customer_churn.csv")
df %>% summary()
df <- df %>% drop_na()
# Clean data
df <- df %>%
mutate_all(as.factor) %>%
mutate(tenure = as.numeric(tenure),
MonthlyCharges = as.numeric(MonthlyCharges),
TotalCharges = as.numeric(TotalCharges)) %>%
select(Churn, everything(), -customerID)
# Create train and test sets
set.seed(42)
tidy_split <- initial_split(df, prop = .8, strata = Churn)
train_data <- training(tidy_split)
test_data <- testing(tidy_split)
tidy_k_folds <- vfold_cv(train_data)
# Pre-process data
tidy_rec <- recipe(Churn~., data = train_data) %>%
step_normalize(all_numeric()) %>%
step_dummy(all_nominal(), -all_outcomes())
tidy_rec %>% prep()
# Create models
logistic_model <- logistic_reg() %>%
set_mode("classification") %>%
set_engine("glm")
randomForest_model <- rand_forest() %>%
set_mode("classification") %>%
set_engine("randomForest")
XGBoost_model <- boost_tree() %>%
set_mode("classification") %>%
set_engine("xgboost")
# Fit resamples
logistic_res <- fit_resamples(logistic_model, tidy_rec, tidy_k_folds)
randomForest_res <- fit_resamples(randomForest_model, tidy_rec, tidy_k_folds)
XGBoost_res <- fit_resamples(XGBoost_model, tidy_rec, tidy_k_folds)
# Extract accuracy from resample
model_res <- tibble(model = list(logistic_res, randomForest_res, XGBoost_res),
model_name = c("logistic", "randomForest", "XGBoost"))
map_collect_metrics <- function(model){
model %>%
select(id, .metrics) %>%
unnest(.metrics)
}
model_res <- model_res %>%
mutate(res = map(model, map_collect_metrics)) %>%
select(model_name, res) %>%
unnest(res)
model_res %>%
ggplot(aes(x = model_name, y = .estimate, color = model_name)) +
geom_boxplot()
model_res %>%
ggplot(aes(x = model_name, y = .estimate, color = id, group = id)) +
geom_line() +
facet_wrap(~.metric, scales = "free_y")
model_pos <- model_res %>%
filter(.metric == "roc_auc") %>%
select(model_name, id, .estimate) %>%
pivot_wider(names_from = "model_name", values_from = .estimate)
library(tidyposterior)
roc_model <- perf_mod(model_pos, seed = 2020)
roc_model %>% tidy()
roc_model %>% tidy() %>%
ggplot(aes(x = model, y = statistic)) +
geom_point()
contrast_models(roc_model, "logistic", "XGBoost")
contrast_models(roc_model, "logistic", "XGBoost") %>%
ggplot()
contrast_models(roc_model) %>%
ggplot()
model_res
model_res %>%
filter(.metric == "roc_auc")
model_res %>%
filter(.metric == "roc_auc") %>%
ggplot(aes(x = .estimate, color = model_name)) +
geom_density()
model_res %>%
filter(.metric == "roc_auc") %>%
ggplot(aes(x = .estimate, color = model_name, fill = model_name)) +
geom_density()
model_res %>%
filter(.metric == "roc_auc") %>%
ggplot(aes(x = .estimate, color = model_name, fill = model_name)) +
geom_density(alpha = .1)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(spotifyr)
spotify_token <- read_csv("spotify.csv")
spotify_token$Client_ID
library(tidyverse)
library(spotifyr)
spotify_token <- read_csv("spotify.csv")
Sys.setenv(SPOTIFY_CLIENT_ID = spotify_token$Client_ID)
Sys.setenv(SPOTIFY_CLIENT_SECRET = spotify_token$Client_Secret)
get_spotify_access_token()
spotify <- read_csv("spotify.csv")
spotify <- read_csv("spotify.csv")
token <- get_spotify_access_token(client_id = spotify$Client_ID,
client_secret = spotify$Client_Secret)
get_artist_audio_features("the beatles")
# User functions
user <- "theholypig"
user_playlist <- get_user_playlists(user)
library(tidyverse)
library(spotifyr)
spotify <- read_csv("spotify.csv")
Sys.setenv(SPOTIFY_CLIENT_ID = spotify$Client_ID)
Sys.setenv(SPOTIFY_CLIENT_SECRET = spotify$Client_Secret)
token <- get_spotify_access_token()
# User functions
user <- "theholypig"
user_playlist <- get_user_playlists(user)
# User functions
user <- "theholypig"
user_playlist <- get_user_playlists(user)
user_playlist
user_profile <- get_my_profile(user)
user_profile
user_profile <- get_my_profile(user)
get_my_profile()
user_audio_features <- get_user_audio_features(user)
user_audio_features
user_audio_features <- get_user_audio_features()
user_audio_features <- get_user_audio_features(user)
user_audio_features <- get_user_audio_features(username = user)
user_tracks <- get_playlist_tracks(user_playlist)
user_playlist
playlist_audio_features <- get_playlist_audio_features(user_tracks)
user_playlist
profile_search <- get_user_profile("theholypig")
profile_search
followed_artist <- get_my_followed_artists()
followed_artist
profile_search
setwd("E:/School/R Work/Tidy Tuesday")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(tidymodels)
df <- read_csv("customer_churn.csv")
df
df %>%
count(Churn)
df
df %>%
mutate_all(as.factor) %>%
mutate(tenure = as.numeric(tenure),
MonthlyCharges = as.numeric(MonthlyCharges),
TotalCharges = as.numeric(TotalCharges))
df %>%
mutate_all(as.factor) %>%
mutate(tenure = as.numeric(tenure),
MonthlyCharges = as.numeric(MonthlyCharges),
TotalCharges = as.numeric(TotalCharges)) %>%
summary()
df %>%
mutate_all(as.factor) %>%
mutate(tenure = as.numeric(tenure),
MonthlyCharges = as.numeric(MonthlyCharges),
TotalCharges = as.numeric(TotalCharges)) %>%
nrow()
df %>%
mutate_all(as.factor) %>%
mutate(tenure = as.numeric(tenure),
MonthlyCharges = as.numeric(MonthlyCharges),
TotalCharges = as.numeric(TotalCharges)) %>%
drop_na()
# Format data and drop missing values
df <- df %>%
mutate_all(as.factor) %>%
mutate(tenure = as.numeric(tenure),
MonthlyCharges = as.numeric(MonthlyCharges),
TotalCharges = as.numeric(TotalCharges)) %>%
drop_na()
data_split <- initial_split(df, strata = Churn, prop = .8)
data_split
# Create a train and test split
set.seed(25)
data_split <- initial_split(df, strata = Churn, prop = .8)
train_data <- training(data_split)
test_data <- testing(data_split)
k_folds_data <- vfold_cv(train_data)
df
model_rec <- recipe(Churn~., data = df) %>%
step_rm(customerID) %>%
step_range(all_numeric()) %>%
step_dummy(all_nominal(), -all_outcomes(), one_hot = TRUE)
model_rec %>%
prep() %>%
juice()
model_rec %>%
prep() %>%
juice() %>%
summary()
levels(df$gender)
levels(df$Churn)
df %>% mutate(Churn = fct_relevel("No", after = 1))
df <- df %>% mutate(Churn = fct_relevel("No", after = 1))
levels(df$Churn)
df <- df %>% mutate(Churn = fct_relevel("No", after = 0))
levels(df$Churn)
library(tidyverse)
library(tidymodels)
df <- read_csv("customer_churn.csv")
# The positive class is the minority class and there is a class imbalance
df %>% count(Churn)
# Format data and drop missing values
df <- df %>%
mutate_all(as.factor) %>%
mutate(tenure = as.numeric(tenure),
MonthlyCharges = as.numeric(MonthlyCharges),
TotalCharges = as.numeric(TotalCharges)) %>%
drop_na()
df <- df %>% mutate(Churn = fct_relevel("No", after = 0))
levels(df$Churn)
library(tidyverse)
library(tidymodels)
df <- read_csv("customer_churn.csv")
# The positive class is the minority class and there is a class imbalance
df %>% count(Churn)
library(tidyverse)
library(tidymodels)
df <- read_csv("customer_churn.csv")
# Format data and drop missing values
df <- df %>%
mutate_all(as.factor) %>%
mutate(tenure = as.numeric(tenure),
MonthlyCharges = as.numeric(MonthlyCharges),
TotalCharges = as.numeric(TotalCharges)) %>%
drop_na()
df <- df %>% mutate(Churn = fct_rev(Churn))
levels(df$Churn)
knitr::opts_chunk$set(echo = TRUE)
df <- read_csv("customer_churn.csv")
df
df %>% count(Churn)
df$Churn %>% levels()
levels(df$Churn)
levels(df$Churn)
levels(df$Churn)
levels(df$Churn %>% as.factor())
# Clean data
df %>% summary()
# Clean data
df
# Clean data
df %>%
drop_na()
# Clean data
df %>%
drop_na() %>%
mutate_all(as.factor)
# Clean data
df %>%
drop_na() %>%
mutate_all(as.factor) %>%
mutate(tenure = as.numeric(tenure),
MonthlyCharges = as.numeric(MonthlyCharges),
TotalCharges = as.numeric(TotalCharges))
# Clean data
df <- df %>%
drop_na() %>%
mutate_all(as.factor) %>%
mutate(tenure = as.numeric(tenure),
MonthlyCharges = as.numeric(MonthlyCharges),
TotalCharges = as.numeric(TotalCharges))
df
levels(df$Churn)
df %>%
mutate(Churn = fct_rev(Churn))
df <- df %>% mutate(Churn = fct_rev(Churn))
levels(df$Churn)
data_split <- initial_split(df, prop = .8, strata = Churn)
# Create train, test, and validation sets
set.seed(25)
data_split <- initial_split(df, prop = .8, strata = Churn)
train_data <- training(data_split)
test_data <- testing(data_split)
k_folds <- vfold_cv(train_data)
# Pre-processing
df
model_rec <- recipe(Churn~., data = train_data) %>%
step_rm(customerID) %>%
step_range(all_numeric()) %>%
step_dummy(all_nominal(), -all_outcomes(), one_hot = TRUE)
model_rec %>% prep() %>% juice()
model_rec %>% prep() %>% juice() %>% summary()
c_metrics <- metric_set(accuracy,
sens, spec,
roc_auc, mn_log_loss)
# Metrics
c_metrics <- metric_set(accuracy,
sens, spec,
roc_auc, mn_log_loss)
model_control <- control_grid(save_pred = TRUE)
knn_model <- nearest_neighbor(neighbors = tune()) %>%
set_mode("classification") %>%
set_engine("kknn")
knn_grid <- grid_regular(parameters(knn_model), levels = 5)
knn_grid
knn_tune <- tune_grid(
knn_model,
model_rec,
resamples = k_folds,
control = model_control,
metrics = c_metrics
)
knn_tune %>% collect_metrics()
knn_tune %>%
collect_metrics() %>%
ggplot(aes(x = neighbors, y = mean)) +
geom_poit() +
geom_line() +
facet_wrap(~.metric, scales = "free_y")
knn_tune %>%
collect_metrics() %>%
ggplot(aes(x = neighbors, y = mean)) +
geom_point() +
geom_line() +
facet_wrap(~.metric, scales = "free_y")
knn_tune
knn_tune %>%
select(id, .metrics) %>%
unnest(.metrics)
knn_tune %>%
select(id, .metrics) %>%
unnest(.metrics) %>%
ggplot(aes(x = neighbors, y = .estimate)) +
geom_point() +
geom_line() +
facet_wrap(~.metric, scales = "free_y")
knn_tune %>%
select(id, .metrics) %>%
unnest(.metrics) %>%
ggplot(aes(x = neighbors, y = .estimate, color = id)) +
geom_point() +
geom_line() +
facet_wrap(~.metric, scales = "free_y")
knn_tune %>%
select(id, .metrics) %>%
unnest(.metrics) %>%
ggplot(aes(x = neighbors, y = .estimate, color = id)) +
geom_point() +
geom_line() +
facet_wrap(~.metric, scales = "free_y") +
theme(legend.position = "none")
knn_tune
knn_tune %>% collect_predictions()
knn_tune %>%
collect_predictions() %>%
mutate(pred = if_else(.pred_Yes >= .5, "Yes", "No"),
pred = as.factor(pred))
knn_tune %>%
collect_predictions() %>%
mutate(pred = if_else(.pred_Yes >= .5, "Yes", "No"),
pred = as.factor(pred)) %>%
conf_mat(Churn, pred)
knn_tune %>%
collect_predictions() %>%
mutate(pred = if_else(.pred_Yes >= .5, "Yes", "No"),
pred = as.factor(pred),
pred = fct_rev(pred)) %>%
conf_mat(Churn, pred)
c_data_metric <- knn_tune %>%
collect_predictions() %>%
mutate(pred = if_else(.pred_Yes >= .5, "Yes", "No"),
pred = as.factor(pred),
pred = fct_rev(pred)) %>%
conf_mat(Churn, pred)
c_data_metric <- knn_tune %>%
collect_predictions() %>%
mutate(pred = if_else(.pred_Yes >= .5, "Yes", "No"),
pred = as.factor(pred),
pred = fct_rev(pred))
c_data_metric %>% conf_mat(Churn, Pred)
c_data_metric %>% conf_mat(Churn, pred)
c_data_metric %>%
accuracy(Churn, pred)
c_data_metric %>%
sens(Churn, pred)
7520 / (7520 + 7440)
c_data_metric %>%
ppv(Churn, pred)
c_data_metric
knn_tune
knn_tune %>% collect_metrics()
knn_tune %>% collect_metrics() %>% filter(.metric == "roc_auc")
knn_tune %>% collect_metrics() %>% filter(.metric == "roc_auc") %>% top_n(mean, n = 1)
knn_tune
knn_tune %>% collect_predictions()
knn_tune %>%
collect_predictions() %>%
group_by(id) %>%
roc_curve(Churn, .pred_Yes)
knn_tune %>%
collect_predictions() %>%
group_by(id) %>%
roc_curve(Churn, .pred_Yes) %>%
autoplot()
knn_tune %>% collect_predictions()
knn_tune %>%
collect_predictions() %>%
gain_curve(Churn, .pred_Yes)
knn_tune %>%
collect_predictions() %>%
gain_curve(Churn, .pred_Yes) %>%
autoplot()
knn_tune %>% select_best(metric = "roc_auc")
final_model <- finalize_model(knn_model, knn_tune)
knn_tune %>% select_best(metric = "roc_auc")
knn_model <- nearest_neighbor(neighbors = 14) %>%
set_mode("classification") %>%
set_engine("kknn")
last_fit(knn_model, data_split)
final_model <- workflow() %>%
add_model(knn_model) %>%
add_recipe(model_rec)
final_res <- last_fit(final_model, data_split)
final_res
final_res %>% collect_predictions()
final_res %>% collect_predictions() %>%
select(.pred_Yes, Churn)
final_res %>% collect_predictions() %>%
select(.pred_Yes, Churn) %>%
mutate(.pred = 100*.pred_Yes)
final_res %>% collect_predictions() %>%
select(.pred_Yes, Churn) %>%
mutate(.pred = 100*.pred_Yes) %>%
select(-.pred_Yes) %>%
mutate(.pred = round(.pred/5)*5)
final_res %>% collect_predictions() %>%
select(.pred_Yes, Churn) %>%
mutate(.pred = 100*.pred_Yes) %>%
select(-.pred_Yes) %>%
mutate(.pred = round(.pred/5)*5) %>%
count(.pred, Churn)
final_res %>% collect_predictions() %>%
select(.pred_Yes, Churn) %>%
mutate(.pred = 100*.pred_Yes) %>%
select(-.pred_Yes) %>%
mutate(.pred = round(.pred/5)*5) %>%
count(.pred, Churn) %>%
pivot_wider(names_from = Churn, values_from = n)
final_res %>% collect_predictions() %>%
select(.pred_Yes, Churn) %>%
mutate(.pred = 100*.pred_Yes) %>%
select(-.pred_Yes) %>%
mutate(.pred = round(.pred/5)*5) %>%
count(.pred, Churn) %>%
pivot_wider(names_from = Churn, values_from = n) %>%
mutate(prob = Yes / (Yes + No))
final_res %>% collect_predictions() %>%
select(.pred_Yes, Churn) %>%
mutate(.pred = 100*.pred_Yes) %>%
select(-.pred_Yes) %>%
mutate(.pred = round(.pred/5)*5) %>%
count(.pred, Churn) %>%
pivot_wider(names_from = Churn, values_from = n) %>%
mutate(prob = Yes / (Yes + No)) %>%
mutate(prob = 100*prob)
final_res %>% collect_predictions() %>%
select(.pred_Yes, Churn) %>%
mutate(.pred = 100*.pred_Yes) %>%
select(-.pred_Yes) %>%
mutate(.pred = round(.pred/5)*5) %>%
count(.pred, Churn) %>%
pivot_wider(names_from = Churn, values_from = n) %>%
mutate(prob = Yes / (Yes + No)) %>%
mutate(prob = 100*prob) %>%
ggplot(aes(x = .pred, y = prob)) +
geom_point() +
geom_smooth()
final_res %>% collect_predictions() %>%
select(.pred_Yes, Churn) %>%
mutate(.pred = 100*.pred_Yes) %>%
select(-.pred_Yes) %>%
mutate(.pred = round(.pred/5)*5) %>%
count(.pred, Churn) %>%
pivot_wider(names_from = Churn, values_from = n) %>%
mutate(prob = Yes / (Yes + No)) %>%
mutate(prob = 100*prob) %>%
ggplot(aes(x = .pred, y = prob)) +
geom_point() +
geom_smooth() +
geom_abline() +
coord_fixed(xlim = c(0,100), ylim = c(0,100))

filter(type == "Bottles and Cans") %>%
select(state, ds = year, y = barrels) %>%
drop_na() %>%
mutate(ds = paste(ds, "01", "01", sep = "-") %>% as.Date()) %>%
group_by(state) %>%
nest()
beer_states %>%
filter(type == "Bottles and Cans") %>%
select(state, ds = year, y = barrels) %>%
drop_na() %>%
mutate(ds = paste(ds, "01", "01", sep = "-") %>% as.Date()) %>%
group_by(state) %>%
nest() %>%
do(model = prophet(data))
beer_states %>%
filter(type == "Bottles and Cans") %>%
select(state, ds = year, y = barrels) %>%
drop_na() %>%
mutate(ds = paste(ds, "01", "01", sep = "-") %>% as.Date()) %>%
group_by(state)
beer_states %>%
filter(type == "Bottles and Cans") %>%
select(state, ds = year, y = barrels) %>%
drop_na() %>%
mutate(ds = paste(ds, "01", "01", sep = "-") %>% as.Date()) %>%
group_by(state) %>%
summarise(model = prophet(.))
beer_states %>%
filter(type == "Bottles and Cans") %>%
select(state, ds = year, y = barrels) %>%
drop_na() %>%
mutate(ds = paste(ds, "01", "01", sep = "-") %>% as.Date()) %>%
group_by(state) %>%
do(model = prophet(.))
beer_states %>%
filter(type == "Bottles and Cans") %>%
select(state, ds = year, y = barrels) %>%
drop_na() %>%
mutate(ds = paste(ds, "01", "01", sep = "-") %>% as.Date()) %>%
group_by(state) %>%
do(model = prophet(.),
future = make_future_dataframe(model, 3))
beer_states %>%
filter(type == "Bottles and Cans") %>%
select(state, ds = year, y = barrels) %>%
drop_na() %>%
mutate(ds = paste(ds, "01", "01", sep = "-") %>% as.Date()) %>%
group_by(state) %>%
do(m = prophet(.),
future = make_future_dataframe(m, 3))
beer_states %>%
filter(type == "Bottles and Cans") %>%
select(state, ds = year, y = barrels) %>%
drop_na() %>%
mutate(ds = paste(ds, "01", "01", sep = "-") %>% as.Date()) %>%
group_by(state)
beer_states %>%
filter(type == "Bottles and Cans") %>%
select(state, ds = year, y = barrels) %>%
drop_na() %>%
mutate(ds = paste(ds, "01", "01", sep = "-") %>% as.Date()) %>%
nest(state)
beer_states %>%
filter(type == "Bottles and Cans") %>%
select(state, ds = year, y = barrels) %>%
drop_na() %>%
mutate(ds = paste(ds, "01", "01", sep = "-") %>% as.Date()) %>%
nest(-state)
beer_states %>%
filter(type == "Bottles and Cans") %>%
select(state, ds = year, y = barrels) %>%
drop_na() %>%
mutate(ds = paste(ds, "01", "01", sep = "-") %>% as.Date()) %>%
nest(-state) %>%
mutate(model = map_dbl(data, ~data %>% unnest() %>% prophet(.x)))
beer_states %>%
filter(type == "Bottles and Cans") %>%
select(state, ds = year, y = barrels) %>%
drop_na() %>%
mutate(ds = paste(ds, "01", "01", sep = "-") %>% as.Date())
beer_states %>%
filter(type == "Bottles and Cans") %>%
select(state, ds = year, y = barrels) %>%
drop_na() %>%
mutate(ds = paste(ds, "01", "01", sep = "-") %>% as.Date()) %>%
split(state)
beer_states %>%
filter(type == "Bottles and Cans") %>%
select(state, ds = year, y = barrels) %>%
drop_na() %>%
mutate(ds = paste(ds, "01", "01", sep = "-") %>% as.Date()) %>%
split(.$state)
beer_states %>%
filter(type == "Bottles and Cans") %>%
select(state, ds = year, y = barrels) %>%
drop_na() %>%
mutate(ds = paste(ds, "01", "01", sep = "-") %>% as.Date()) %>%
split(.$state) %>%
map(~prophet(data = .))
results <- beer_states %>%
filter(type == "Bottles and Cans") %>%
select(state, ds = year, y = barrels) %>%
drop_na() %>%
mutate(ds = paste(ds, "01", "01", sep = "-") %>% as.Date()) %>%
split(.$state) %>%
map(~prophet(data = .))
results
results <- beer_states %>%
filter(type == "Bottles and Cans") %>%
select(state, ds = year, y = barrels) %>%
drop_na() %>%
mutate(ds = paste(ds, "01", "01", sep = "-") %>% as.Date()) %>%
split(.$state) %>%
map_dbl(~prophet(data = .))
results <- beer_states %>%
filter(type == "Bottles and Cans") %>%
select(state, ds = year, y = barrels) %>%
drop_na() %>%
mutate(ds = paste(ds, "01", "01", sep = "-") %>% as.Date()) %>%
nest(-state) %>%
map_dbl(~prophet(data = .))
results <- beer_states %>%
filter(type == "Bottles and Cans") %>%
select(state, ds = year, y = barrels) %>%
drop_na() %>%
mutate(ds = paste(ds, "01", "01", sep = "-") %>% as.Date()) %>%
nest(-state)
beer_states %>%
filter(type == "Bottles and Cans") %>%
select(state, ds = year, y = barrels) %>%
drop_na() %>%
mutate(ds = paste(ds, "01", "01", sep = "-") %>% as.Date()) %>%
nest(-state)
beer_states %>%
filter(type == "Bottles and Cans") %>%
select(state, ds = year, y = barrels) %>%
drop_na() %>%
mutate(ds = paste(ds, "01", "01", sep = "-") %>% as.Date()) %>%
nest(-state) %>%
mutate(model = sapply(data, prophet))
beer_states %>%
filter(type == "Bottles and Cans") %>%
select(state, ds = year, y = barrels) %>%
drop_na() %>%
mutate(ds = paste(ds, "01", "01", sep = "-") %>% as.Date()) %>%
nest(-state) %>%
mutate(model = lapply(data, prophet))
beer_states %>%
filter(type == "Bottles and Cans") %>%
select(state, ds = year, y = barrels) %>%
drop_na() %>%
mutate(ds = paste(ds, "01", "01", sep = "-") %>% as.Date()) %>%
nest(-state) %>%
mutate(model = lapply(data, prophet),
future = make_future_dataframe(model, 2))
beer_states %>%
filter(type == "Bottles and Cans") %>%
select(state, ds = year, y = barrels) %>%
drop_na() %>%
mutate(ds = paste(ds, "01", "01", sep = "-") %>% as.Date()) %>%
nest(-state) %>%
mutate(model = lapply(data, prophet)) %>%
mutate(future = make_future_dataframe(model, 2))
beer_states %>%
filter(type == "Bottles and Cans") %>%
select(state, ds = year, y = barrels) %>%
mutate(ds = paste(ds, "01", "01", sep = "-") %>% as.Date())
state_data <- beer_states %>%
filter(type == "Bottles and Cans") %>%
select(state, ds = year, y = barrels) %>%
mutate(ds = paste(ds, "01", "01", sep = "-") %>% as.Date())
state_data
model_func <- function(data, state_name){
data <- data %>% filter(state == state_name) %>% select(-state)
model <- prophet(data)
future <- make_future_dataframe(model, 2)
results <- predict(model, future) %>% select(ds, yhat, yhat_upper, yhat_lower)
return(reslts %>% nest())
}
state_data
state_data %>% select(state) %>% duplicate()
state_data %>% select(state) %>% distinct()
state_list <- state_data %>% select(state) %>% distinct()
model_func <- function(state_name){
data <- state_data %>% filter(state == state_name) %>% select(-state)
model <- prophet(data)
future <- make_future_dataframe(model, 2)
results <- predict(model, future) %>% select(ds, yhat, yhat_upper, yhat_lower)
return(reslts %>% nest())
}
state_list <- state_data %>% select(state) %>% distinct()
state_list <- state_data %>% select(state) %>% distinct() %>% as.list()
results <- lapply(state_list, model_func)
model_func <- function(state_name){
data <- state_data %>% filter(state == state_name) %>% select(-state)
model <- prophet(data)
future <- make_future_dataframe(model, 2)
results <- predict(model, future) %>% select(ds, yhat, yhat_upper, yhat_lower)
return(results %>% nest())
}
state_list <- state_data %>% select(state) %>% distinct() %>% as.list()
results <- lapply(state_list, model_func)
results
results %>% unnest()
results %>% unlist()
state_list
model_func("AK")
model_func("AK") %>% unnest()
model_func <- function(state_name){
data <- state_data %>% filter(state == state_name) %>% select(-state)
model <- prophet(data)
future <- make_future_dataframe(model, 2)
results <- predict(model, future) %>% select(ds, yhat, yhat_upper, yhat_lower) %>% mutate(name = state_name)
return(results %>% nest())
}
sapply(state_list, model_func)
model_func("IA")
model_func("IA") %>%
unlist()
model_func("IA")
model_func <- function(state_name){
data <- state_data %>% filter(state == state_name) %>% select(-state)
model <- prophet(data)
future <- make_future_dataframe(model, 2)
results <- predict(model, future) %>% select(ds, yhat, yhat_upper, yhat_lower) %>% mutate(name = state_name)
return(results)
}
model_func("IA")
lapply(state_list, model_func)
sapply(state_list, model_func)
state_list
state_list <- state_data %>% select(state) %>% distinct()
state_list
state_list %>%
mutate(results = map_dbl(state, model_func))
state_list %>%
mutate(results = map(state, model_func))
results <- state_list %>%
mutate(results = map(state, model_func))
results
results %>% unnest()
model_func <- function(state_name){
data <- state_data %>% filter(state == state_name) %>% select(-state)
model <- prophet(data)
future <- make_future_dataframe(model, 2)
results <- predict(model, future) %>% select(ds, yhat, yhat_upper, yhat_lower)
return(results)
}
results <- state_list %>%
mutate(results = map(state, model_func))
results %>% unnest()
results %>%
unnest() %>%
select(state, ds, yhat, yhat_upper, yhat_lower) %>%
mutate(ds = ds -2000) %>%
ggplot(aes(x = ds, y= yhat, color = state)) +
geom_ribbon(aes(ymax = yhat_upper, ymin = yhat_lower, fill = state), alpha = .1)  +
geom_line(color = "black") +
facet_geo(~state, grid = "us_state_grid2", scales = "free") +
theme(legend.position = "none") +
labs(title = "Forcasted Bottles and Cans Production",
subtitle = "Microlevel forecasting using Prophet")
library(geofacet)
results %>%
unnest() %>%
select(state, ds, yhat, yhat_upper, yhat_lower) %>%
mutate(ds = ds -2000) %>%
ggplot(aes(x = ds, y= yhat, color = state)) +
geom_ribbon(aes(ymax = yhat_upper, ymin = yhat_lower, fill = state), alpha = .1)  +
geom_line(color = "black") +
facet_geo(~state, grid = "us_state_grid2", scales = "free") +
theme(legend.position = "none") +
labs(title = "Forcasted Bottles and Cans Production",
subtitle = "Microlevel forecasting using Prophet")
library(tidyverse)
library(extrafont)
windowsFonts()
df <- readr::read_csv("https://raw.githubusercontent.com/TheEconomist/graphic-detail-data/master/data/2019-07-06-mandatory-voting/state_level_estimates_with_probs.csv")
df %>% glimpse()
#Data wrangling
df %>%
select(state_abb, total_evs_2016, prob = dem_probability_2016pred, prob_mand = dem_probability_mandatory) %>%
mutate_at(vars(contains("prob")), ~.x * 100) %>%
mutate(state_abb = reorder(state_abb, -prob_mand)) %>%
mutate(right_color = if_else(prob >= 50, "#e3120b", "#0093b1")) %>%
mutate(left_color = if_else(prob_mand >= 50, "#e3120b", "#0093b1")) %>%
#Plotting
ggplot(aes(x = prob, y = state_abb, label = state_abb)) +
geom_vline(xintercept = 50) +
geom_segment(aes(xend = prob_mand, yend = state_abb, size = log10(10*total_evs_2016)), color = "#cfe1eb") +
geom_segment(aes(xend = prob - 1, yend = state_abb, size = log10(10*total_evs_2016), color = right_color)) +
geom_segment(aes(x = prob_mand, xend = prob_mand + 1, yend = state_abb, size = log10(10*total_evs_2016), color = left_color)) +
geom_text(aes(x = prob, y = state_abb), color = "black", nudge_x = 2.2) +
#Annotations
annotate("text", x = 55, y = 50, label = "Hillary Clinton \n more likely to win", family = "serif", color = "#0093b1", hjust = 1, size = 5) +
annotate("text", x = 45, y = 50, label = "Donald Trump \n more likely to win", family = "serif", color = "#e3120b", hjust = 0, size = 5) +
#Formatting
scale_x_reverse(breaks = c(0, 10, 20, 30, 40, 50, 60, 70 ,80, 90, 100), labels = c("100", "90", "80", "70", "60", "50", "60", "70", "80", "90", "100"), ) +
theme_minimal() +
scale_y_discrete(breaks = NULL) +
xlab("") +
ylab("") +
theme(legend.position = "none",
plot.title = element_text(size = 20, color = "#e3120b", hjust = .5),
plot.subtitle = element_text(size = 24, family = "serif", hjust = .5),
panel.grid.minor.x = element_blank()) +
labs(title = "The silent near-majority",
subtitle = "If everyone had voted, Hillary \n Clinton would probably be \n president")
library(tidyverse)
library(extrafont)
windowsFonts()
df <- readr::read_csv("https://raw.githubusercontent.com/TheEconomist/graphic-detail-data/master/data/2019-07-06-mandatory-voting/state_level_estimates_with_probs.csv")
df %>% glimpse()
#Data wrangling
df %>%
select(state_abb, total_evs_2016, prob = dem_probability_2016pred, prob_mand = dem_probability_mandatory) %>%
mutate_at(vars(contains("prob")), ~.x * 100) %>%
mutate(state_abb = reorder(state_abb, -prob_mand)) %>%
mutate(right_color = if_else(prob >= 50, "#e3120b", "#0093b1")) %>%
mutate(left_color = if_else(prob_mand >= 50, "#e3120b", "#0093b1")) %>%
#Plotting
ggplot(aes(x = prob, y = state_abb, label = state_abb)) +
geom_vline(xintercept = 50) +
geom_segment(aes(xend = prob_mand, yend = state_abb, size = log10(10*total_evs_2016)), color = "#cfe1eb") +
geom_segment(aes(xend = prob - .5, yend = state_abb, size = log10(10*total_evs_2016), color = right_color)) +
geom_segment(aes(x = prob_mand, xend = prob_mand + .5, yend = state_abb, size = log10(10*total_evs_2016), color = left_color)) +
geom_text(aes(x = prob, y = state_abb), color = "black", nudge_x = 2.2) +
#Annotations
annotate("text", x = 55, y = 50, label = "Hillary Clinton \n more likely to win", family = "serif", color = "#0093b1", hjust = 1, size = 5) +
annotate("text", x = 45, y = 50, label = "Donald Trump \n more likely to win", family = "serif", color = "#e3120b", hjust = 0, size = 5) +
#Formatting
scale_x_reverse(breaks = c(0, 10, 20, 30, 40, 50, 60, 70 ,80, 90, 100), labels = c("100", "90", "80", "70", "60", "50", "60", "70", "80", "90", "100"), ) +
theme_minimal() +
scale_y_discrete(breaks = NULL) +
xlab("") +
ylab("") +
theme(legend.position = "none",
plot.title = element_text(size = 20, color = "#e3120b", hjust = .5),
plot.subtitle = element_text(size = 24, family = "serif", hjust = .5),
panel.grid.minor.x = element_blank()) +
labs(title = "The silent near-majority",
subtitle = "If everyone had voted, Hillary \n Clinton would probably be \n president")
library(tidyverse)
library(extrafont)
windowsFonts()
df <- readr::read_csv("https://raw.githubusercontent.com/TheEconomist/graphic-detail-data/master/data/2019-07-06-mandatory-voting/state_level_estimates_with_probs.csv")
df %>% glimpse()
#Data wrangling
df %>%
select(state_abb, total_evs_2016, prob = dem_probability_2016pred, prob_mand = dem_probability_mandatory) %>%
mutate_at(vars(contains("prob")), ~.x * 100) %>%
mutate(state_abb = reorder(state_abb, -prob_mand)) %>%
mutate(right_color = if_else(prob >= 50, "#e3120b", "#0093b1")) %>%
mutate(left_color = if_else(prob_mand >= 50, "#e3120b", "#0093b1")) %>%
#Plotting
ggplot(aes(x = prob, y = state_abb, label = state_abb)) +
geom_vline(xintercept = 50) +
geom_segment(aes(xend = prob_mand, yend = state_abb, size = (10*total_evs_2016)), color = "#cfe1eb") +
geom_segment(aes(xend = prob - .5, yend = state_abb, size = (10*total_evs_2016), color = right_color)) +
geom_segment(aes(x = prob_mand, xend = prob_mand + .5, yend = state_abb, size = (10*total_evs_2016), color = left_color)) +
geom_text(aes(x = prob, y = state_abb), color = "black", nudge_x = 2.2) +
#Annotations
annotate("text", x = 55, y = 50, label = "Hillary Clinton \n more likely to win", family = "serif", color = "#0093b1", hjust = 1, size = 5) +
annotate("text", x = 45, y = 50, label = "Donald Trump \n more likely to win", family = "serif", color = "#e3120b", hjust = 0, size = 5) +
#Formatting
scale_x_reverse(breaks = c(0, 10, 20, 30, 40, 50, 60, 70 ,80, 90, 100), labels = c("100", "90", "80", "70", "60", "50", "60", "70", "80", "90", "100"), ) +
theme_minimal() +
scale_y_discrete(breaks = NULL) +
xlab("") +
ylab("") +
theme(legend.position = "none",
plot.title = element_text(size = 20, color = "#e3120b", hjust = .5),
plot.subtitle = element_text(size = 24, family = "serif", hjust = .5),
panel.grid.minor.x = element_blank()) +
labs(title = "The silent near-majority",
subtitle = "If everyone had voted, Hillary \n Clinton would probably be \n president")
library(tidyverse)
library(extrafont)
windowsFonts()
df <- readr::read_csv("https://raw.githubusercontent.com/TheEconomist/graphic-detail-data/master/data/2019-07-06-mandatory-voting/state_level_estimates_with_probs.csv")
df %>% glimpse()
#Data wrangling
df %>%
select(state_abb, total_evs_2016, prob = dem_probability_2016pred, prob_mand = dem_probability_mandatory) %>%
mutate_at(vars(contains("prob")), ~.x * 100) %>%
mutate(state_abb = reorder(state_abb, -prob_mand)) %>%
mutate(right_color = if_else(prob >= 50, "#e3120b", "#0093b1")) %>%
mutate(left_color = if_else(prob_mand >= 50, "#e3120b", "#0093b1")) %>%
#Plotting
ggplot(aes(x = prob, y = state_abb, label = state_abb)) +
geom_vline(xintercept = 50) +
geom_rect(aes(xend = prob_mand, yend = state_abb, size = (10*total_evs_2016)), color = "#cfe1eb") +
geom_rect(aes(xend = prob - .5, yend = state_abb, size = (10*total_evs_2016), color = right_color)) +
geom_rect(aes(x = prob_mand, xend = prob_mand + .5, yend = state_abb, size = (10*total_evs_2016), color = left_color)) +
geom_text(aes(x = prob, y = state_abb), color = "black", nudge_x = 2.2) +
#Annotations
annotate("text", x = 55, y = 50, label = "Hillary Clinton \n more likely to win", family = "serif", color = "#0093b1", hjust = 1, size = 5) +
annotate("text", x = 45, y = 50, label = "Donald Trump \n more likely to win", family = "serif", color = "#e3120b", hjust = 0, size = 5) +
#Formatting
scale_x_reverse(breaks = c(0, 10, 20, 30, 40, 50, 60, 70 ,80, 90, 100), labels = c("100", "90", "80", "70", "60", "50", "60", "70", "80", "90", "100"), ) +
theme_minimal() +
scale_y_discrete(breaks = NULL) +
xlab("") +
ylab("") +
theme(legend.position = "none",
plot.title = element_text(size = 20, color = "#e3120b", hjust = .5),
plot.subtitle = element_text(size = 24, family = "serif", hjust = .5),
panel.grid.minor.x = element_blank()) +
labs(title = "The silent near-majority",
subtitle = "If everyone had voted, Hillary \n Clinton would probably be \n president")
library(tidyverse)
library(extrafont)
windowsFonts()
df <- readr::read_csv("https://raw.githubusercontent.com/TheEconomist/graphic-detail-data/master/data/2019-07-06-mandatory-voting/state_level_estimates_with_probs.csv")
df %>% glimpse()
#Data wrangling
df %>%
select(state_abb, total_evs_2016, prob = dem_probability_2016pred, prob_mand = dem_probability_mandatory) %>%
mutate_at(vars(contains("prob")), ~.x * 100) %>%
mutate(state_abb = reorder(state_abb, -prob_mand)) %>%
mutate(right_color = if_else(prob >= 50, "#e3120b", "#0093b1")) %>%
mutate(left_color = if_else(prob_mand >= 50, "#e3120b", "#0093b1")) %>%
#Plotting
ggplot(aes(xmax = prob, ymax = state_abb, label = state_abb)) +
geom_vline(xintercept = 50) +
geom_rect(aes(xmin = prob_mand, ymin = state_abb, size = (10*total_evs_2016)), color = "#cfe1eb") +
geom_rect(aes(xmin = prob - .5, ymin = state_abb, size = (10*total_evs_2016), color = right_color)) +
geom_rect(aes(xmax = prob_mand, xmin = prob_mand + .5, ymin = state_abb, size = (10*total_evs_2016), color = left_color)) +
geom_text(aes(xmax = prob, ymin = state_abb), color = "black", nudge_x = 2.2) +
#Annotations
annotate("text", x = 55, y = 50, label = "Hillary Clinton \n more likely to win", family = "serif", color = "#0093b1", hjust = 1, size = 5) +
annotate("text", x = 45, y = 50, label = "Donald Trump \n more likely to win", family = "serif", color = "#e3120b", hjust = 0, size = 5) +
#Formatting
scale_x_reverse(breaks = c(0, 10, 20, 30, 40, 50, 60, 70 ,80, 90, 100), labels = c("100", "90", "80", "70", "60", "50", "60", "70", "80", "90", "100"), ) +
theme_minimal() +
scale_y_discrete(breaks = NULL) +
xlab("") +
ylab("") +
theme(legend.position = "none",
plot.title = element_text(size = 20, color = "#e3120b", hjust = .5),
plot.subtitle = element_text(size = 24, family = "serif", hjust = .5),
panel.grid.minor.x = element_blank()) +
labs(title = "The silent near-majority",
subtitle = "If everyone had voted, Hillary \n Clinton would probably be \n president")
library(tidyverse)
library(extrafont)
windowsFonts()
df <- readr::read_csv("https://raw.githubusercontent.com/TheEconomist/graphic-detail-data/master/data/2019-07-06-mandatory-voting/state_level_estimates_with_probs.csv")
df %>% glimpse()
#Data wrangling
df %>%
select(state_abb, total_evs_2016, prob = dem_probability_2016pred, prob_mand = dem_probability_mandatory) %>%
mutate_at(vars(contains("prob")), ~.x * 100) %>%
mutate(state_abb = reorder(state_abb, -prob_mand)) %>%
mutate(right_color = if_else(prob >= 50, "#e3120b", "#0093b1")) %>%
mutate(left_color = if_else(prob_mand >= 50, "#e3120b", "#0093b1")) %>%
#Plotting
ggplot(aes(xmax = prob, ymax = state_abb, x = prob, y = state_abb, label = state_abb)) +
geom_vline(xintercept = 50) +
geom_rect(aes(xmin = prob_mand, ymin = state_abb, size = (10*total_evs_2016)), color = "#cfe1eb") +
geom_rect(aes(xmin = prob - .5, ymin = state_abb, size = (10*total_evs_2016), color = right_color)) +
geom_rect(aes(xmax = prob_mand, xmin = prob_mand + .5, ymin = state_abb, size = (10*total_evs_2016), color = left_color)) +
geom_text(aes(xmax = prob, ymin = state_abb), color = "black", nudge_x = 2.2) +
#Annotations
annotate("text", x = 55, y = 50, label = "Hillary Clinton \n more likely to win", family = "serif", color = "#0093b1", hjust = 1, size = 5) +
annotate("text", x = 45, y = 50, label = "Donald Trump \n more likely to win", family = "serif", color = "#e3120b", hjust = 0, size = 5) +
#Formatting
scale_x_reverse(breaks = c(0, 10, 20, 30, 40, 50, 60, 70 ,80, 90, 100), labels = c("100", "90", "80", "70", "60", "50", "60", "70", "80", "90", "100"), ) +
theme_minimal() +
scale_y_discrete(breaks = NULL) +
xlab("") +
ylab("") +
theme(legend.position = "none",
plot.title = element_text(size = 20, color = "#e3120b", hjust = .5),
plot.subtitle = element_text(size = 24, family = "serif", hjust = .5),
panel.grid.minor.x = element_blank()) +
labs(title = "The silent near-majority",
subtitle = "If everyone had voted, Hillary \n Clinton would probably be \n president")
library(tidyverse)
library(extrafont)
windowsFonts()
df <- readr::read_csv("https://raw.githubusercontent.com/TheEconomist/graphic-detail-data/master/data/2019-07-06-mandatory-voting/state_level_estimates_with_probs.csv")
df %>% glimpse()
#Data wrangling
df %>%
select(state_abb, total_evs_2016, prob = dem_probability_2016pred, prob_mand = dem_probability_mandatory) %>%
mutate_at(vars(contains("prob")), ~.x * 100) %>%
mutate(state_abb = reorder(state_abb, -prob_mand)) %>%
mutate(right_color = if_else(prob >= 50, "#e3120b", "#0093b1")) %>%
mutate(left_color = if_else(prob_mand >= 50, "#e3120b", "#0093b1")) %>%
#Plotting
ggplot(aes(xmax = prob, ymax = state_abb, x = prob, y = state_abb, label = state_abb)) +
geom_vline(xintercept = 50) +
geom_rect(aes(xmin = prob_mand, ymin = state_abb, size = log(10*total_evs_2016)), color = "#cfe1eb") +
geom_rect(aes(xmin = prob - .5, ymin = state_abb, size = log(10*total_evs_2016), color = right_color)) +
geom_rect(aes(xmax = prob_mand, xmin = prob_mand + .5, ymin = state_abb, size = log(10*total_evs_2016), color = left_color)) +
geom_text(aes(xmax = prob, ymin = state_abb), color = "black", nudge_x = 2.2) +
#Annotations
annotate("text", x = 55, y = 50, label = "Hillary Clinton \n more likely to win", family = "serif", color = "#0093b1", hjust = 1, size = 5) +
annotate("text", x = 45, y = 50, label = "Donald Trump \n more likely to win", family = "serif", color = "#e3120b", hjust = 0, size = 5) +
#Formatting
scale_x_reverse(breaks = c(0, 10, 20, 30, 40, 50, 60, 70 ,80, 90, 100), labels = c("100", "90", "80", "70", "60", "50", "60", "70", "80", "90", "100"), ) +
theme_minimal() +
scale_y_discrete(breaks = NULL) +
xlab("") +
ylab("") +
theme(legend.position = "none",
plot.title = element_text(size = 20, color = "#e3120b", hjust = .5),
plot.subtitle = element_text(size = 24, family = "serif", hjust = .5),
panel.grid.minor.x = element_blank()) +
labs(title = "The silent near-majority",
subtitle = "If everyone had voted, Hillary \n Clinton would probably be \n president")

ggplot(aes(x = year, y = total_barrels, color = brewer_size) + geom_bar()
brewer_size %>%
brewer_size %>%
filter(brewer_size != "Total") %>%
ggplot(aes(x = year, y = total_barrels, color = brewer_size)) + geom_bar()
brewer_size %>%
filter(brewer_size != "Total")
brewer_size %>%
filter(brewer_size != "Total") %>%
ggplot(aes(x = year, y = total_barrels)) + geom_line() + facet_wrap(~brewer_size)
brewer_size %>%
filter(brewer_size != "Total") %>%
ggplot(aes(x = year, y = total_barrels)) + geom_line() + facet_wrap(~brewer_size, scales = "free")
brewer_size
brewer_size %>%
select(-year, -brewer_size) %>%
cor()
brewer_size %>%
select(-year, -brewer_size) %>%
drop_na()
brewer_size %>%
select(-year, -brewer_size) %>%
drop_na() %>%
cor()
brewer_size %>%
select(-year, -brewer_size) %>%
drop_na() %>%
cor() %>%
broom::tidy()
brewer_size
brewer_size %>%
selecT(year, brewer_size, n_of_brewers)
brewer_size %>%
select(year, brewer_size, n_of_brewers)
brewer_size %>%
select(year, brewer_size, n_of_brewers)
brewer_size %>%
select(year, brewer_size, n_of_brewers) %>%
ggplot(aes(x = year, y = n_of_brewers, color = brewer_size)) + geom_line()
brewer_size %>%
filter(brewer_size != "Total") %>%
select(year, brewer_size, n_of_brewers) %>%
ggplot(aes(x = year, y = n_of_brewers, color = brewer_size)) + geom_line()
brewer_size %>%
filter(brewer_size != "Total") %>%
select(year, brewer_size, n_of_brewers) %>%
ggplot(aes(x = year, y = n_of_brewers, color = brewer_size)) + geom_line() + scale_y_log10()
beer_states
beer_states %>%
count(type)
beer_states
beer_states %>%
count(type)
beer_states
beer_states %>%
filter(type == "Bottles and Cans")
beer_states %>%
filter(type == "Bottles and Cans") %>%
select(state, year, barrels)
beer_states %>%
filter(type == "Bottles and Cans") %>%
select(state, year, barrels) %>%
group_by(state)
beer_states %>%
filter(type == "Bottles and Cans") %>%
select(state, year, barrels) %>%
group_by(state) %>%
do(model = lm(year~barrels, data = .))
beer_states %>%
filter(type == "Bottles and Cans") %>%
select(state, year, barrels) %>%
group_by(state) %>%
do(model = lm(year~barrels, data = .)) %>%
broom::augment(model)
beer_states %>%
filter(type == "Bottles and Cans") %>%
select(state, year, barrels) %>%
group_by(state) %>%
do(model = lm(year~barrels, data = .)) %>%
broom::augment(model) %>%
select(state, year, barrels, fitted)
beer_states %>%
filter(type == "Bottles and Cans") %>%
select(state, year, barrels) %>%
group_by(state) %>%
do(model = lm(year~barrels, data = .)) %>%
broom::augment(model) %>%
select(state, year, barrels, .fitted)
beer_states %>%
filter(type == "Bottles and Cans") %>%
select(state, year, barrels) %>%
group_by(state) %>%
do(model = lm(barrels~years, data = .)) %>%
broom::augment(model) %>%
select(state, year, barrels, .fitted)
beer_states %>%
filter(type == "Bottles and Cans") %>%
select(state, year, barrels) %>%
group_by(state) %>%
do(model = lm(barrels~ years, data = .)) %>%
broom::augment(model) %>%
select(state, year, barrels, .fitted)
beer_states %>%
filter(type == "Bottles and Cans") %>%
select(state, year, barrels) %>%
group_by(state) %>%
do(model = lm(barrels~ year, data = .)) %>%
broom::augment(model) %>%
select(state, year, barrels, .fitted)
beer_states %>%
filter(type == "Bottles and Cans") %>%
select(state, year, barrels) %>%
group_by(state) %>%
do(model = lm(barrels~ year, data = .)) %>%
broom::augment(model) %>%
select(state, year, barrels, .fitted) %>%
ggplot(aes(x = state, y = barrels, color = state)) +
geom_line() +
geom_line(aes(y = .fitted))
beer_states %>%
filter(type == "Bottles and Cans") %>%
select(state, year, barrels) %>%
group_by(state) %>%
do(model = lm(barrels~ year, data = .)) %>%
broom::augment(model) %>%
select(state, year, barrels, .fitted) %>%
ggplot(aes(x = state, y = barrels, color = state)) +
geom_line() +
geom_line(aes(y = .fitted)) +
facet_geo(~state, grid = "us_state_grid2") +
theme(legend.position = "none")
beer_states %>%
filter(type == "Bottles and Cans") %>%
select(state, year, barrels) %>%
group_by(state) %>%
do(model = lm(barrels~ year, data = .)) %>%
broom::augment(model) %>%
select(state, year, barrels, .fitted) %>%
ggplot(aes(x = state, y = barrels, color = state)) +
geom_line() +
geom_line(aes(y = .fitted)) +
facet_geo(~state, grid = "us_state_grid2", scales = "free") +
theme(legend.position = "none")
beer_states %>%
filter(type == "Bottles and Cans") %>%
select(state, year, barrels) %>%
group_by(state) %>%
do(model = lm(barrels~ year, data = .)) %>%
broom::augment(model) %>%
select(state, year, barrels, .fitted) %>%
ggplot(aes(x = state, y = barrels, color = state)) +
geom_line() +
geom_line(aes(y = .fitted)) +
facet_geo(~state, grid = "us_state_grid2", scales = "free") +
theme(legend.position = "none")
beer_states
beer_states %>%
filter(type == "Bottles and Cans") %>%
select(state, year, barrels) %>%
group_by(state) %>%
do(model = lm(barrels~ year, data = .)) %>%
broom::augment(model) %>%
select(state, year, barrels, .fitted) %>%
ggplot(aes(x = year, y = barrels, color = state)) +
geom_line() +
geom_line(aes(y = .fitted)) +
facet_geo(~state, grid = "us_state_grid2", scales = "free") +
theme(legend.position = "none")
beer_states %>%
filter(type == "Bottles and Cans") %>%
select(state, year, barrels)
beer_states %>%
filter(type == "Bottles and Cans") %>%
select(state, ds = year, y = barrels)
beer_states %>%
filter(type == "Bottles and Cans") %>%
select(state, ds = year, y = barrels) %>%
mutate(ds = paste(ds, "01", "01", sep = "-"))
beer_states %>%
filter(type == "Bottles and Cans") %>%
select(state, ds = year, y = barrels) %>%
mutate(ds = paste(ds, "01", "01", sep = "-") %>% as.Date())
beer_states %>%
filter(type == "Bottles and Cans") %>%
select(state, ds = year, y = barrels) %>%
mutate(ds = paste(ds, "01", "01", sep = "-") %>% as.Date()) %>%
group_by(state)
beer_states %>%
filter(type == "Bottles and Cans") %>%
select(state, ds = year, y = barrels) %>%
mutate(ds = paste(ds, "01", "01", sep = "-") %>% as.Date()) %>%
group_by(state) %>%
do(model = prophet(.))
state_forcast <- beer_states %>%
filter(type == "Bottles and Cans") %>%
select(state, ds = year, y = barrels) %>%
mutate(ds = paste(ds, "01", "01", sep = "-") %>% as.Date()) %>%
group_by(state) %>%
do(model = prophet(.)) %>%
do(future = make_future_dataframe(model, 2))
state_forcast
state_forcast <- beer_states %>%
filter(type == "Bottles and Cans") %>%
select(state, ds = year, y = barrels) %>%
mutate(ds = paste(ds, "01", "01", sep = "-") %>% as.Date()) %>%
group_by(state) %>%
do(model = prophet(.),
future = make_future_dataframe(model, 2))
state_forcast
state_forcast %>%
mutate(results = map_dbl(future, predict(model)))
state_forcast
state_forcast %>%
mutate(results = predict(model, future))
state_forcast %>%
mutate(results = predict(model, future) %>% nest())
state_forcast
state_forcast %>%
mutate(results = map_dbl(future, predict))
state_forcast %>%
mutate(results = map2_dbl(model, future, predict))
state_forcast %>%
mutate(results = map2_dbl(.x = model, .y = future, .f = predict))
state_forcast %>%
mutate(results = map2_dbl(.x = model, .y = future, .f = predict(.x, .y)))
?map2_dbl
state_forcast %>%
mutate(results = map2_dbl(.x = model, .y = future,predict(.x, .y)))
state_forcast
state_forcast %>%
mutate(results = map2_dbl(predict(model, future)))
state_forcast %>%
mutate(results = map2_dbl(.f = predict(model, future)))
state_forcast %>%
mutate(results = map2_dbl(.x = model, .y = future, .f = predict(model, future)))
state_forcast %>%
mutate(results = map2_dbl(.x = model, .y = future, .f = predict(.x, .y)))
state_forcast %>%
mutate(results = map2_dbl(.x = model, .y = future, .f = predict(.x, .y, data = .)))
state_forcast
state_forcast %>%
mutate(results = map2(model, data, predict))
state_forcast
state_forcast %>%
nest(-state)
state_forcast %>%
nest(-state) %>%
map_dbl(data, predict)
state_forcast %>%
nest(-state)
state_forcast %>%
nest(-state) %>%
mutate(results = map_dbl(data, predict))
state_forcast
state_forcast %>%
mutate(results = map_dbl(.x = model, .y = future, .f = predict))
state_forcast
state_forcast %>%
unnest()
state_forcast
state_forcast %>%
unnest(future)
state_forcast %>%
unnest(model)
state_forcast %>%
mutate(results = map_dbl(.x = model, .y = future, .f = predict))
state_forcast
state_forcast %>%
slice(1)
state_forcast %>%
slice(1) %>%
select(model)
state_forcast %>%
slice(1) %>%
select(-state)
state_forcast %>%
slice(1) %>%
select(-state) %>%
predict(model, future)
state_forcast %>%
slice(1) %>%
select(-state) %>%
predict(model, future %>% unnest())
state_forcast %>%
slice(1) %>%
select(-state)
state_forcast %>%
slice(1) %>%
select(-state) %>%
unnest(future)
state_forcast %>%
slice(1) %>%
select(-state) %>%
unnest(future) %>%
summarise(results = predict(model, ds))
state_forcast
state_model <- function(df){
predict(model, df)
}
state_forcast
state_model <- function(model, df){
predict(model, df)
}
state_forcast
state_forcast %>%
mutate(results = map_dbl(.x = model, .y = future, .f = state_model))
state_forcast %>%
mutate(results = map_dbl(.x = model, .y = .$future, .f = state_model))
state_model <- function(model, df){
df <- df %>% unlist() %>% as.data.frame()
predict(model, df)
}
state_forcast %>%
mutate(results = map_dbl(.x = model, .y = .$future, .f = state_model))
state_forcast
state_forcast %>% select(future) %>% slice(1)
state_forcast %>% select(future) %>% slice(1) %>% unnest()
state_model <- function(model, df){
df <- df %>% unnest()
predict(model, df)
}
state_forcast
state_forcast %>%
mutate(results = map_dbl(.x = model, .y = future, .f = state_model))
state_forcast
state_forcast <- beer_states %>%
filter(type == "Bottles and Cans") %>%
select(state, ds = year, y = barrels) %>%
mutate(ds = paste(ds, "01", "01", sep = "-") %>% as.Date()) %>%
group_by(state) %>%
do(model = prophet(.),
future = make_future_dataframe(model, 2),
results = predict(model, future))
state_forcast
state_forcast %>%
unnest(results)
key <- model_data %>%
select(type) %>%
distinct() %>%
mutate(name = c("Malt", "Corn", "Rice", "Barley", "Wheat", "Total_Grain", "Sugar", "Hops_Dry", "Hops_Extract", "Other", "Total_Non_Grain", "Total_Used"))
hey
key
model_data %>%
ggplot(aes(x = ds, y = month_current, color = type)) +
geom_smooth() +
geom_point() +
facet_wrap(~type, scales = "free") +
theme(legend.position = "none")
model_data <- brewing_materials %>%
select(year, month, type, month_current) %>%
mutate(month = if_else(month < 10, paste(0, month, sep = ""), month %>% as.character()),
year = as.character(year),
ds = paste(year, month, "01", sep = "-") %>% as.Date()) %>%
select(type, ds, month_current)
key <- model_data %>%
select(type) %>%
distinct() %>%
mutate(name = c("Malt", "Corn", "Rice", "Barley", "Wheat", "Total_Grain", "Sugar", "Hops_Dry", "Hops_Extract", "Other", "Total_Non_Grain", "Total_Used"))
model_data %>%
ggplot(aes(x = ds, y = month_current, color = type)) +
geom_smooth() +
geom_point() +
facet_wrap(~type, scales = "free") +
theme(legend.position = "none")
library(prophet)
key <- model_data %>%
select(type) %>%
distinct() %>%
mutate(name = c("Malt", "Corn", "Rice", "Barley", "Wheat", "Total_Grain", "Sugar", "Hops_Dry", "Hops_Extract", "Other", "Total_Non_Grain", "Total_Used"))
key
model_data %>%
ggplot(aes(x = ds, y = month_current, color = type)) +
geom_smooth() +
geom_point() +
facet_wrap(~type, scales = "free") +
theme(legend.position = "none")
library(prophet)
key
model_results <- data.frame()
for (i in 1:12){
model <- model_data %>%
filter(type ==  key$type[i]) %>%
select(ds, y = month_current) %>%
prophet()
assign(paste(key$name[i], "model", sep = "_"), model)
future <- make_future_dataframe(model, periods = 3)
results <- predict(model, future) %>%
select(ds, yhat_lower, yhat_upper, yhat) %>%
mutate(type = key$type[i],
ds = as.Date(ds)) %>%
inner_join(model_data, by = c("type" = "type", "ds" = "ds"))
model_results <- rbind(model_results, results)
}
model_results %>%
ggplot(aes(x = ds, y = month_current, color = type)) +
geom_line(color = "black")  +
geom_line(aes(x = ds, y = yhat, color = type)) +
geom_ribbon(aes(ymin = yhat_lower, ymax = yhat_upper, fill = type), alpha = .1) +
facet_wrap(~type, scales = "free") +
theme(legend.position = "none") +
labs(title = "Forecasting with Prophet",
subtitle = "Forecasting Material Usage for Beer Companies")
model_results %>%
ggplot(aes(x = yhat, y = month_current, color = type)) +
geom_point() +
geom_abline(slope = 1) +
facet_wrap(~type, scales = "free") +
theme(legend.position = "none")
model_results %>%
ggplot(aes(x = ds, month_current, color = type)) +
geom_point() +
geom_line(aes(y = yhat, color = "prophet")) +
facet_wrap(~type, scales = "free") +
theme(legend.position = "none")
beer_states %>%
filter(type == "Bottles and Cans") %>%
select(state, ds = year, y = barrels) %>%
mutate(ds = paste(ds, "01", "01", sep = "-") %>% as.Date()) %>%
group_by(state)
state_forcast <- beer_states %>%
filter(type == "Bottles and Cans") %>%
select(state, ds = year, y = barrels) %>%
mutate(ds = paste(ds, "01", "01", sep = "-") %>% as.Date()) %>%
group_by(state) %>%
do(model = prophet(.),
future = make_future_dataframe(model, 2),
results = predict(model, future))
state_forcast
state_forcast %>%
unnest(results)
state_forcast %>%
unnest(results) %>%
select(state, ds, yhat, yhat_upper, yhat_lower)
state_forcast %>%
unnest(results) %>%
select(state, ds, yhat, yhat_upper, yhat_lower) %>%
ggplot(aes(x = ds, y= yhat, color = state)) +
geom_line() +
geom_ribbon(aes(ymax = yhat_upper, ymin = yhat_lower), alpha = .1)
state_forcast %>%
unnest(results) %>%
select(state, ds, yhat, yhat_upper, yhat_lower) %>%
ggplot(aes(x = ds, y= yhat, color = state)) +
geom_line() +
geom_ribbon(aes(ymax = yhat_upper, ymin = yhat_lower, fill = state), alpha = .1)
geom_line(color = "black") +
geom_line(color = "black")
geom_line(color = "black")
state_forcast %>%
unnest(results) %>%
select(state, ds, yhat, yhat_upper, yhat_lower) %>%
ggplot(aes(x = ds, y= yhat, color = state)) +
geom_ribbon(aes(ymax = yhat_upper, ymin = yhat_lower, fill = state), alpha = .1)  +
geom_line(color = "black")
state_forcast %>%
unnest(results) %>%
select(state, ds, yhat, yhat_upper, yhat_lower) %>%
ggplot(aes(x = ds, y= yhat, color = state)) +
geom_ribbon(aes(ymax = yhat_upper, ymin = yhat_lower, fill = state), alpha = .1)  +
geom_line(color = "black") +
facet_geo(~state, grid = "us_state_grid2", scales = "free") +
theme(legend.position = "none")
```{r, fig.height = 15, fig.width = 15}
state_forcast %>%
unnest(results) %>%
select(state, ds, yhat, yhat_upper, yhat_lower) %>%
ggplot(aes(x = ds, y= yhat, color = state)) +
geom_ribbon(aes(ymax = yhat_upper, ymin = yhat_lower, fill = state), alpha = .1)  +
geom_line(color = "black") +
facet_geo(~state, grid = "us_state_grid2", scales = "free") +
theme(legend.position = "none")
state_forcast %>%
unnest(results) %>%
select(state, ds, yhat, yhat_upper, yhat_lower) %>%
mutate(ds = ds -2000) %>%
ggplot(aes(x = ds, y= yhat, color = state)) +
geom_ribbon(aes(ymax = yhat_upper, ymin = yhat_lower, fill = state), alpha = .1)  +
geom_line(color = "black") +
facet_geo(~state, grid = "us_state_grid2", scales = "free") +
theme(legend.position = "none")
state_forcast %>%
unnest(results) %>%
select(state, ds, yhat, yhat_upper, yhat_lower) %>%
mutate(ds = ds -2000) %>%
ggplot(aes(x = ds, y= yhat, color = state)) +
geom_ribbon(aes(ymax = yhat_upper, ymin = yhat_lower, fill = state), alpha = .1)  +
geom_line(color = "black") +
facet_geo(~state, grid = "us_state_grid2", scales = "free") +
theme(legend.position = "none")
state_forcast %>%
unnest(results) %>%
select(state, ds, yhat, yhat_upper, yhat_lower) %>%
mutate(ds = ds -2000) %>%
ggplot(aes(x = ds, y= yhat, color = state)) +
geom_ribbon(aes(ymax = yhat_upper, ymin = yhat_lower, fill = state), alpha = .1)  +
geom_line(color = "black") +
facet_geo(~state, grid = "us_state_grid2", scales = "free") +
theme(legend.position = "none") +
labs(title = "Forcasted Bottles and Cans Production",
subtitle = "Microlevel forecasting using Prophet")
state_forcast %>%
unnest(results) %>%
select(state, ds, yhat, yhat_upper, yhat_lower) %>%
mutate(ds = ds -2000) %>%
ggplot(aes(x = ds, y= yhat, color = state)) +
geom_ribbon(aes(ymax = yhat_upper, ymin = yhat_lower, fill = state), alpha = .1)  +
geom_line(color = "black") +
facet_geo(~state, grid = "us_state_grid2", scales = "free") +
theme(legend.position = "none") +
labs(title = "Forcasted Bottles and Cans Production",
subtitle = "Microlevel forecasting using Prophet")
ggsave("forecast.pdf", plot = last_plot(), width = 32, height = 18, units = "in")

unnest(res) %>%
ggplot(aes(x = model_name, y = .estimate, color = model_name)) +
geom_boxplot() +
coord_flip() +
facet_wrap(~.metric)
model_res %>%
mutate(res = map(model, map_collect_metrics)) %>%
select(model_name, res) %>%
unnest(res) %>%
ggplot(aes(x = model_name, y = .estimate, color = model_name)) +
geom_boxplot() +
coord_flip() +
facet_wrap(~.metric)
model_res %>%
mutate(res = map(model, map_collect_metrics)) %>%
select(model_name, res) %>%
unnest(res) %>%
ggplot(aes(x = model_name, y = .estimate, color = model_name)) +
geom_boxplot() +
facet_wrap(~.metric)
model_res %>%
mutate(res = map(model, map_collect_metrics)) %>%
select(model_name, res) %>%
unnest(res) %>%
filter(.metric == "accuracy") %>%
ggplot(aes(x = model_name, y = .estimate, color = model_name)) +
geom_boxplot()
model_res %>%
mutate(res = map(model, map_collect_metrics)) %>%
select(model_name, res) %>%
unnest(res) %>%
ggplot(aes(x = model_name, y = .estimate, color = model_name)) +
geom_boxplot()
model_res
model_res <- model_res %>%
mutate(res = map(model, map_collect_metrics)) %>%
select(model_name, res) %>%
unnest(res)
model_res %>%
filter(.metric == "accuracy") %>%
ggplot(aes(x = model_name, y = .estimate, color = model_name)) +
geom_boxplot()
# Use a secondary metric
model_res %>%
ggplot(aes(x = model_name, y = .estimate, color = model_name)) +
geom_boxplot()
model_res
model_res %>%
select(model_name, id, .metric, .estimate)
model_res
model_res %>%
ggplot(aes(x = model_name, y = .estimate, color = id)) +
geom_line() +
facet_wrap(~.metric)
model_res %>%
ggplot(aes(x = model_name, y = .estimate, color = id, group = interaction(model_name, id))) +
geom_line() +
facet_wrap(~.metric)
model_res %>%
ggplot(aes(x = model_name, y = .estimate, color = id, group = model_name)) +
geom_line() +
facet_wrap(~.metric)
model_res %>%
ggplot(aes(x = model_name, y = .estimate, color = id, group = id)) +
geom_line() +
facet_wrap(~.metric)
model_res %>%
ggplot(aes(x = model_name, y = .estimate, color = id, group = id)) +
geom_line() +
facet_wrap(~.metric, scales = "free_y")
model_res %>%
ggplot(aes(x = model_name, y = .estimate, color = model_name)) +
geom_boxplot()
model_res
model_res %>%
select(model_name, id, .metric, .estiamte)
model_res
model_res %>%
filter(.metric == "roc_auc")
model_res %>%
filter(.metric == "roc_auc") %>%
select(model_name, id, .estimate)
model_res %>%
filter(.metric == "roc_auc") %>%
select(model_name, id, .estimate) %>%
pivot_wider(names_from = "model_name", values_from = .estimate)
model_pos <- model_res %>%
filter(.metric == "roc_auc") %>%
select(model_name, id, .estimate) %>%
pivot_wider(names_from = "model_name", values_from = .estimate)
library(tidyposterior)
roc_model <- perf_mod(model_pos, seed = 2020)
roc_model$stan
roc_model %>% tidy()
roc_model %>% tidy() %>%
ggplot(aes(x = model, y = statistic)) +
geom_point()
contrast_models(roc_model, "logistic", "XGBoost")
contrast_models(roc_model, "logistic", "XGBoost") %>% ggplot()
roc_model %>% tidy() %>%
ggplot(aes(x = model, y = statistic))
contrast_models(roc_model, "logistic", "XGBoost") %>%
ggplot()
roc_model %>% tidy() %>%
ggplot(aes(x = model, y = statistic)) +
geom_point()
roc_model$hetero_var
roc_model$names
roc_model$rset_type
roc_model$transform
roc_model
roc_model %>% tidy()
contrast_models(roc_model, "logistic", "XGBoost")
knitr::opts_chunk$set(echo = TRUE)
library(tidymodels)
library(tidyverse)
df <- read_csv("customer_churn.csv")
df %>% summary()
df <- df %>% drop_na()
# Clean data
df <- df %>%
mutate_all(as.factor) %>%
mutate(tenure = as.numeric(tenure),
MonthlyCharges = as.numeric(MonthlyCharges),
TotalCharges = as.numeric(TotalCharges)) %>%
select(Churn, everything(), -customerID)
# Create train and test sets
set.seed(42)
tidy_split <- initial_split(df, prop = .8, strata = Churn)
train_data <- training(tidy_split)
test_data <- testing(tidy_split)
tidy_k_folds <- vfold_cv(train_data)
# Pre-process data
tidy_rec <- recipe(Churn~., data = train_data) %>%
step_normalize(all_numeric()) %>%
step_dummy(all_nominal(), -all_outcomes())
tidy_rec %>% prep()
# Create models
logistic_model <- logistic_reg() %>%
set_mode("classification") %>%
set_engine("glm")
randomForest_model <- rand_forest() %>%
set_mode("classification") %>%
set_engine("randomForest")
XGBoost_model <- boost_tree() %>%
set_mode("classification") %>%
set_engine("xgboost")
# Fit resamples
logistic_res <- fit_resamples(logistic_model, tidy_rec, tidy_k_folds)
randomForest_res <- fit_resamples(randomForest_model, tidy_rec, tidy_k_folds)
XGBoost_res <- fit_resamples(XGBoost_model, tidy_rec, tidy_k_folds)
# Extract accuracy from resample
model_res <- tibble(model = list(logistic_res, randomForest_res, XGBoost_res),
model_name = c("logistic", "randomForest", "XGBoost"))
map_collect_metrics <- function(model){
model %>%
select(id, .metrics) %>%
unnest(.metrics)
}
model_res <- model_res %>%
mutate(res = map(model, map_collect_metrics)) %>%
select(model_name, res) %>%
unnest(res)
model_res %>%
ggplot(aes(x = model_name, y = .estimate, color = model_name)) +
geom_boxplot()
model_res %>%
ggplot(aes(x = model_name, y = .estimate, color = id, group = id)) +
geom_line() +
facet_wrap(~.metric, scales = "free_y")
model_pos <- model_res %>%
filter(.metric == "roc_auc") %>%
select(model_name, id, .estimate) %>%
pivot_wider(names_from = "model_name", values_from = .estimate)
library(tidyposterior)
roc_model <- perf_mod(model_pos, seed = 2020)
roc_model %>% tidy()
roc_model %>% tidy() %>%
ggplot(aes(x = model, y = statistic)) +
geom_point()
contrast_models(roc_model, "logistic", "XGBoost")
contrast_models(roc_model, "logistic", "XGBoost") %>%
ggplot()
contrast_models(roc_model) %>%
ggplot()
model_res
model_res %>%
filter(.metric == "roc_auc")
model_res %>%
filter(.metric == "roc_auc") %>%
ggplot(aes(x = .estimate, color = model_name)) +
geom_density()
model_res %>%
filter(.metric == "roc_auc") %>%
ggplot(aes(x = .estimate, color = model_name, fill = model_name)) +
geom_density()
model_res %>%
filter(.metric == "roc_auc") %>%
ggplot(aes(x = .estimate, color = model_name, fill = model_name)) +
geom_density(alpha = .1)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(spotifyr)
spotify_token <- read_csv("spotify.csv")
spotify_token$Client_ID
library(tidyverse)
library(spotifyr)
spotify_token <- read_csv("spotify.csv")
Sys.setenv(SPOTIFY_CLIENT_ID = spotify_token$Client_ID)
Sys.setenv(SPOTIFY_CLIENT_SECRET = spotify_token$Client_Secret)
get_spotify_access_token()
spotify <- read_csv("spotify.csv")
spotify <- read_csv("spotify.csv")
token <- get_spotify_access_token(client_id = spotify$Client_ID,
client_secret = spotify$Client_Secret)
get_artist_audio_features("the beatles")
# User functions
user <- "theholypig"
user_playlist <- get_user_playlists(user)
library(tidyverse)
library(spotifyr)
spotify <- read_csv("spotify.csv")
Sys.setenv(SPOTIFY_CLIENT_ID = spotify$Client_ID)
Sys.setenv(SPOTIFY_CLIENT_SECRET = spotify$Client_Secret)
token <- get_spotify_access_token()
# User functions
user <- "theholypig"
user_playlist <- get_user_playlists(user)
# User functions
user <- "theholypig"
user_playlist <- get_user_playlists(user)
user_playlist
user_profile <- get_my_profile(user)
user_profile
user_profile <- get_my_profile(user)
get_my_profile()
user_audio_features <- get_user_audio_features(user)
user_audio_features
user_audio_features <- get_user_audio_features()
user_audio_features <- get_user_audio_features(user)
user_audio_features <- get_user_audio_features(username = user)
user_tracks <- get_playlist_tracks(user_playlist)
user_playlist
playlist_audio_features <- get_playlist_audio_features(user_tracks)
user_playlist
profile_search <- get_user_profile("theholypig")
profile_search
followed_artist <- get_my_followed_artists()
followed_artist
profile_search
library(tidyverse)
library(tidymodels)
library(AmesHousing)
df <- make_ames()
set.seed(42)
tidy_split <- initial_split(df, prop = .8)
train_data <- training(tidy_split)
test_data <- testing(tidy_split)
k_folds <- vfold_cv(train_data)
# Create recipe and add tuning options to parameters
tidy_rec <- recipe(Sale_Price~., data = train_data) %>%
step_corr(all_numeric(), -all_outcomes(), threshold = tune("num_thresh")) %>%
step_nzv(all_numeric(), -all_outcomes()) %>%
step_normalize(all_numeric(), -all_outcomes()) %>%
step_YeoJohnson(all_numeric(), -all_outcomes()) %>%
step_pca(all_numeric(), -all_outcomes(), num_comp = tune()) %>%
#step_other(all_nominal(), threshold = tune("cat_thresh")) %>%
step_dummy(all_nominal(), one_hot = TRUE)
# Define a lasso regression model and model metrics
linear_model <- linear_reg(penalty = tune(), mixture = 1) %>%
set_mode("regression") %>%
set_engine("glmnet")
model_metrics <- metric_set(rmse, rsq, rsq_trad, mae)
# Create model parameters
model_grid <- grid_regular(parameters(linear_model), levels = 5)
# Create pre-processing parameters
rec_grid <- grid_regular(parameters(tidy_rec), levels = 5)
grid_regular(parameters(tidy_rec), levels = 5, filter = list(num_thresh > .7))
grid_regular(parameters(tidy_rec), levels = 5)
grid_regular(parameters(tidy_rec), levels = 5, filter = c(num_thresh > .7))
grid_regular(parameters(tidy_rec), levels = 10, filter = c(num_thresh > .7))
rec_grid <- grid_regular(parameters(tidy_rec), levels = 10, filter = c(num_thresh > .7))
# Create pre-processing parameters
rec_grid <- grid_regular(parameters(tidy_rec), levels = 5)
rec_grid
rec_grid <- grid_regular(parameters(tidy_rec), levels = 10, filter = c(num_thresh > .7))
rec_grid
setwd("E:/School/R Work/Tidy Tuesday")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(tidymodels)
library(AmesHousing)
df <- make_ames()
df
df %>% summary()
set.seed(31)
tidy_split <- initial_split(df, prop = .8)
train_data <- training(tidy_split)
test_data <- testing(tidy_split)
k_folds_data <- vfold_cv(train_data)
recipe(Sale_Price~., data = train_data) %>%
step_corr(all_numeric(), -all_outcomes(), threshold = tune()) %>%
step_nzv(all_numeric(), -all_outcomes()) %>%
step_normalize(all_numeric(), -all_outcomes()) %>%
step_YeoJohnson(all_numeric(), -all_outcomes()) %>%
step_pca(all_numeric(), -all_outcomes(), num_comp = tune()) %>%
step_other(all_nominal(), threshold = tune()) %>%
step_dummy(all_nominal())
tidy_rec <- recipe(Sale_Price~., data = train_data) %>%
step_corr(all_numeric(), -all_outcomes(), threshold = tune("num_thresh")) %>%
step_nzv(all_numeric(), -all_outcomes()) %>%
step_normalize(all_numeric(), -all_outcomes()) %>%
step_YeoJohnson(all_numeric(), -all_outcomes()) %>%
step_pca(all_numeric(), -all_outcomes(), num_comp = tune()) %>%
step_other(all_nominal(), threshold = tune("cat_thresh")) %>%
step_dummy(all_nominal())
linear_model <- linear_reg(penalty = tune(), mixture = 1) %>%
set_mode("regression") %>%
set_engine("glmnet")
model_metrics <- metric_set(rmse, rsq, rsq_trad, mae)
model_grid <- grid_regular(parameters(linear_model), levels = 5)
model_grid
parameters(tidy_rec)
rec_grid <- grid_regular(parameters(tidy_rec), levels = 5)
rec_grid
rec_grid <- grid_regular(parameters(tidy_rec), levels = 5, filter = c(num_thresh > .7, cat_thresh < .1))
rec_grid <- grid_regular(parameters(tidy_rec), levels = 5, filter = c(num_thresh > .7 & cat_thresh < .1))
rec_grid
rec_grid <- grid_regular(parameters(tidy_rec), levels = 5, filter = c(num_thresh > .7 & cat_thresh > .01))
rec_grid
merge(model_grid, rec_grid)
model_rec_grid <- merge(model_grid, rec_grid)
model_res <- tune_grid(linear_model,
preprocessor = tidy_rec,
resamples = k_folds_data,
grid = model_rec_grid,
metrics = model_metrics
)
model_res
model_res %>% pull(.notes)
model_res
model_res %>% pull(.notes)
model_res %>% collect_metrics()
640/4
model_res %>% collect_metrics() %>% pivot_longer(cols = num_thresh:cat_thresh)
model_res %>%
collect_metrics() %>%
pivot_longer(cols = num_thresh:cat_thresh) %>%
ggplot(aes(x = penalty, y = value, fill = mean)) +
geom_tile() +
facet_wrap(~name, scales = "free")
model_res %>%
collect_metrics() %>%
pivot_longer(cols = num_thresh:cat_thresh)
model_res %>%
collect_metrics() %>%
pivot_longer(cols = num_thresh:cat_thresh) %>%
ggplot(aes(x = penalty, y = value, fill = mean)) +
geom_tile() +
facet_wrap(~name + .metric, scales = "free")
model_res %>%
collect_metrics() %>%
pivot_longer(cols = num_thresh:cat_thresh)
model_res %>%
collect_metrics() %>%
pivot_longer(cols = num_thresh:cat_thresh) %>%
filter(.metric == "mae")
model_res %>%
collect_metrics() %>%
pivot_longer(cols = num_thresh:cat_thresh) %>%
filter(.metric == "mae") %>%
ggplot(aes(x = penalty, y = value, fill = mean)) +
geom_tile() +
facet_wrap(~name, scales = "free")
model_res %>%
collect_metrics() %>%
pivot_longer(cols = num_thresh:cat_thresh) %>%
filter(.metric == "mae") %>%
ggplot(aes(x = penalty, y = value, fill = mean)) +
geom_point() +
facet_wrap(~name, scales = "free")
model_res %>%
collect_metrics() %>%
pivot_longer(cols = num_thresh:cat_thresh) %>%
filter(.metric == "mae") %>%
ggplot(aes(x = penalty, y = value, color = mean)) +
geom_point() +
facet_wrap(~name, scales = "free")
model_res %>%
collect_metrics(summarize = FALSE) %>%
pivot_longer(cols = num_thresh:cat_thresh) %>%
filter(.metric == "mae")
model_res %>%
collect_metrics(summarize = FALSE) %>%
pivot_longer(cols = num_thresh:cat_thresh) %>%
filter(.metric == "mae") %>%
ggplot(aes(x = penalty, y = value, color = .estimate)) +
geom_point() +
facet_wrap(~name, scales = "free")
model_res %>%
collect_metrics(summarize = FALSE) %>%
pivot_longer(cols = num_thresh:cat_thresh) %>%
filter(.metric == "mae") %>%
ggplot(aes(x = penalty, y = value, color = .estimate)) +
geom_jitter() +
facet_wrap(~name, scales = "free")
.estimate
model_res %>%
collect_metrics(summarize = FALSE) %>%
pivot_longer(cols = num_thresh:cat_thresh) %>%
filter(.metric == "mae") %>%
ggplot(aes(x = value, y = .estimate, color = .estimate)) +
geom_jitter() +
facet_wrap(~name, scales = "free")
model_res %>%
collect_metrics(summarize = FALSE) %>%
pivot_longer(cols = num_thresh:cat_thresh) %>%
filter(.metric == "mae") %>%
ggplot(aes(x = value, y = .estimate)) +
geom_jitter() +
facet_wrap(~name, scales = "free")
model_res
model_res %>% collect_metrics()
model_res %>%
collect_metrics() %>%
pivot_wider(names_from = .metric, values_from = mean)
model_res %>%
collect_metrics() %>%
pivot_wider(names_from = .metric, values_from = mean) %>%
drop_na()
model_res %>%
collect_metrics() %>%
pivot_wider(names_from = .metric, values_from = mean)
model_res
model_res %>% pull(.notes)
model_res %>% collect_metrics()
model_res %>%
collect_metrics() %>%
group_by(.metric) %>%
arrange(mean)
model_res %>%
collect_metrics() %>%
group_by(.metric) %>%
arrange(desc(mean))
model_res %>%
collect_metrics() %>%
group_by(.metric) %>%
summarise(min = min(mean),
median = median(mean),
mean = mean(mean),
max = max(mean))
model_res
model_res %>% collect_metrics(summarize = FALSE)
model_res %>% collect_metrics(summarize = FALSE) %>%
pivot_longer(num_thresh:cat_thresh)
model_res %>%
collect_metrics(summarize = FALSE) %>%
pivot_longer(num_thresh:cat_thresh) %>%
filter(.metric == "mae")
model_res %>%
collect_metrics(summarize = FALSE) %>%
pivot_longer(num_thresh:cat_thresh) %>%
filter(.metric == "mae") %>%
ggplot(aes(x = value, y = .estimate)) +
geom_point() +
geom_smooth() +
facet_wrap(~name, scales = "free")
model_res %>% select_by_one_std_err("mae")
model_res %>% select_best("mae")
model_tune <- model_res %>% select_best("mae")
finalize_model(linear_model, model_tune)
linear_model <-  finalize_model(linear_model, model_tune)
pricing_model <- workflow() %>%
add_model(linear_model) %>%
add_recipe(tidy_rec)
pricing_model_fit <- last_fit(pricing_model, tidy_split)
pricing_model_fit
finalize_recipe(tidy_rec, model_tune)
tidy_rec <- finalize_recipe(tidy_rec, model_tune)
# Apply parameters to the model
linear_model <-  finalize_model(linear_model, model_tune)
tidy_rec <- finalize_recipe(tidy_rec, model_tune)
pricing_model <- workflow() %>%
add_model(linear_model) %>%
add_recipe(tidy_rec)
pricing_model_fit <- last_fit(pricing_model, tidy_split)
pricing_model_fit
pricing_model_fit %>% collect_predictions()
pricing_model_fit %>%
collect_predictions() %>%
MAE(.pred, Sale_Price)
pricing_model_fit %>%
collect_predictions() %>%
mae(.pred, Sale_Price)
pricing_model_fit
pricing_model_fit %>% collect_predictions()
pricing_model_fit %>%
collect_predictions() %>%
ggplot(aes(x = .pred, y = Sale_Price)) +
geom_line() +
geom_smooth()
pricing_model_fit %>%
collect_predictions() %>%
ggplot(aes(x = .pred, y = Sale_Price)) +
geom_point() +
geom_smooth()
pricing_model_fit %>%
collect_predictions() %>%
ggplot(aes(x = .pred, y = Sale_Price)) +
geom_point() +
geom_smooth() +
geom_abline(slope = 1, intercept = 0)

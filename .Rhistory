set_engine("glmnet")
## Create Knn model
tidy_knn <- nearest_neighbor(neighbors = tune()) %>%
set_mode("classification") %>%
set_engine("kknn")
#Create Grid for Logistic regression model
logistic_grid <- grid_regular(penalty(), mixture(), levels = 10)
#Create grid for Knn model
knn_grid <- grid_regular(neighbors(), levels = 10)
#Tune models
logistic_tune <- tune_grid(
tidy_logistic,
logistic_grid,
resamples = tidy_kfolds
)
#Tune models
logistic_tune <- tune_grid(
tidy_logistic,
logistic_grid,
resamples = tidy_kfolds,
tidy_rec
)
#Tune models
logistic_tune <- tune_grid(
wf %>% add_model(tidy_logistic),
resamples = tidy_kfolds,
grid = logistic_grid
)
#Train models
#Establish workflow
wf <- workflow() %>%
add_recipe(tidy_rec)
## Craeate Logistic Regression model
tidy_logistic <- multinom_reg(penalty = tune(), mixture = tune()) %>%
set_mode("classification") %>%
set_engine("glmnet")
## Create Knn model
tidy_knn <- nearest_neighbor(neighbors = tune()) %>%
set_mode("classification") %>%
set_engine("kknn")
#Create Grid for Logistic Regression model
logistic_grid <- grid_regular(penalty(), mixture(), levels = 10)
#Create grid for Knn model
knn_grid <- grid_regular(neighbors(), levels = 10)
#Tune models
#Tune Logistic Regression model
logistic_tune <- tune_grid(
wf %>% add_model(tidy_logistic),
resamples = tidy_kfolds,
grid = logistic_grid
)
logistic_tune
logistic_tune %>%
collect_metrics()
logistic_tune
logistic_tune %>% collect_predictions()
#Save predictions
ctrl <- control_resamples(save_pred = TRUE)
#Save predictions
ctrl <- control_resamples(save_pred = TRUE)
#Tune models
#Tune Logistic Regression model
logistic_tune <- tune_grid(
wf %>% add_model(tidy_logistic),
resamples = tidy_kfolds,
grid = logistic_grid,
control = ctrl
)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(keras)
library(Rtsne)
library(plotly)
library(tidymodels)
mnist_data <- dataset_mnist()
image_data <- mnist_data$train$x
image_labels <- mnist_data$train$y
image_data %>% dim()
image_data <- array_reshape(image_data, dim = c(60000, 28*28))
image_data %>% dim()
image_labels[1:1000] %>% as_tibble() %>% count(value)
image_data <- image_data[1:1000,]
image_labels <- image_labels[1:1000]
image_labels <- tibble("labels" = image_labels)
set.seed(42)
image_data <- normalize_input(image_data)
tsne_df <- Rtsne(image_data, perplexity = 25, dims = 3)
model_df <- tsne_df$Y %>%
as_tibble() %>%
cbind(image_labels) %>%
mutate(labels = as.factor(labels))
plot_3d <- plot_ly(model_df, x = ~V1, y = ~V2, z = ~V3, color = ~labels) %>%
add_markers()
#htmlwidgets::saveWidget(plot_3d, "tsne_plot.html")
#Create train and test splits
tidy_split <- initial_split(model_df, prop = .8)
tidy_train <- training(tidy_split)
tidy_test <- testing(tidy_split)
#Create pre-processing recipe
tidy_rec <- recipe(labels~., data = tidy_train) %>%
step_center(all_predictors()) %>%
step_scale(all_predictors())
tidy_prep <- prep(tidy_rec)
tidy_juice <- juice(tidy_prep)
#Set validation to k-folds
tidy_kfolds <- vfold_cv(tidy_train, v = 10)
#Train models
#Establish workflow
wf <- workflow() %>%
add_recipe(tidy_rec)
## Craeate Logistic Regression model
tidy_logistic <- multinom_reg(penalty = tune(), mixture = tune()) %>%
set_mode("classification") %>%
set_engine("glmnet")
## Create Knn model
tidy_knn <- nearest_neighbor(neighbors = tune()) %>%
set_mode("classification") %>%
set_engine("kknn")
#Create Grid for Logistic Regression model
logistic_grid <- grid_regular(penalty(), mixture(), levels = 10)
#Create grid for Knn model
knn_grid <- grid_regular(neighbors(), levels = 10)
#Save predictions
ctrl <- control_resamples(save_pred = TRUE)
#Tune models
#Tune Logistic Regression model
logistic_tune <- tune_grid(
wf %>% add_model(tidy_logistic),
resamples = tidy_kfolds,
grid = logistic_grid,
control = ctrl
)
logistic_tune %>% collect_predictions()
#Tune Knn model
knn_tune <- tune_grid(
wf %>% add_model(tidy_knn),
resamples = tidy_kfolds,
grid = knn_grid,
control = ctrl
)
install.packages("kknn")
logistic_tune %>% collect_predictions()
#Tune Knn model
knn_tune <- tune_grid(
wf %>% add_model(tidy_knn),
resamples = tidy_kfolds,
grid = knn_grid,
control = ctrl
)
logistic_tune %>%
collect_metrics()
logistic_tune %>%
select_best("accuracy")
logistic_tune %>%
select_best("accuracy")
knn_tune %>%
select_best("accuracy")
knn_tune %>%
select_best("accuracy")
logistic_tune %>%
select_best("accuracy")
logistic_tune %>%
collect()
logistic_tune %>%
collect_metrics()
logistic_tune %>%
collect_metrics() %>%
filter(.metric == "accuracy") %>%
select(penalty(, mixture, mean))
logistic_tune %>%
collect_metrics() %>%
filter(.metric == "accuracy") %>%
select(penalty, mixture, mean)
logistic_tune %>%
collect_metrics() %>%
filter(.metric == "accuracy") %>%
select(penalty, mixture, mean) %>%
pivot_longer(-mean)
logistic_tune %>%
collect_metrics() %>%
filter(.metric == "accuracy") %>%
select(penalty, mixture, mean) %>%
pivot_longer(-mean) %>%
ggplot(aes(x = value, y = mean, color = name)) + geom_line()
logistic_tune %>%
collect_metrics() %>%
filter(.metric == "accuracy") %>%
select(penalty, mixture, mean) %>%
pivot_longer(-mean) %>%
ggplot(aes(x = value, y = mean, color = name)) + geom_line() + facet_wrap(names, scales = "free")
logistic_tune %>%
collect_metrics() %>%
filter(.metric == "accuracy") %>%
select(penalty, mixture, mean) %>%
pivot_longer(-mean) %>%
ggplot(aes(x = value, y = mean, color = name)) + geom_line() + facet_wrap(name, scales = "free")
logistic_tune %>%
collect_metrics() %>%
filter(.metric == "accuracy") %>%
select(penalty, mixture, mean) %>%
pivot_longer(-mean) %>%
ggplot(aes(x = value, y = mean, color = name)) + geom_line() + facet_wrap(~name, scales = "free")
knn_tune %>%
collect_metrics()
knn_tune %>%
collect_metrics() %>%
filter(.metric == "accuracy")
knn_tune %>%
collect_metrics() %>%
filter(.metric == "accuracy") %>%
ggplot(aes(x = neighbors, y = mean)) + geom_line()
logistic_tune %>%
select_best("accuracy")
update_model(tidy_logistic, logistic_tune %>% select_best("accuracy"))
finalize_model(tidy_logistic, logistic_tune %>% select_best("accuracy"))
tidy_logistic <- finalize_model(tidy_logistic, logistic_tune %>% select_best("accuracy"))
tidy_knn <- finalize_model(tidy_knn, knn_tune %>% select_best("accuracy"))
wf %>% add_model(tidy_logistic) %>% last_fit(tidy_split) %>% collect_metrics()
wf %>% add_model(tidy_knn) %>% last_fit(tidy_split) %>% collect_metrics()
?last_fit
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(keras)
library(Rtsne)
library(plotly)
library(tidymodels)
mnist_data <- dataset_mnist()
image_data <- mnist_data$train$x
image_labels <- mnist_data$train$y
image_data %>% dim()
image_data <- array_reshape(image_data, dim = c(60000, 28*28))
image_data %>% dim()
image_labels[1:1000] %>% as_tibble() %>% count(value)
image_data <- image_data[1:1000,]
image_labels <- image_labels[1:1000]
image_labels <- tibble("labels" = image_labels)
set.seed(42)
image_data <- normalize_input(image_data)
tsne_df <- Rtsne(image_data, perplexity = 25, dims = 3)
model_df <- tsne_df$Y %>%
as_tibble() %>%
cbind(image_labels) %>%
mutate(labels = as.factor(labels))
plot_3d <- plot_ly(model_df, x = ~V1, y = ~V2, z = ~V3, color = ~labels) %>%
add_markers()
#htmlwidgets::saveWidget(plot_3d, "tsne_plot.html")
#Create train and test splits
tidy_split <- initial_split(model_df, prop = .8)
tidy_train <- training(tidy_split)
tidy_test <- testing(tidy_split)
#Create pre-processing recipe
tidy_rec <- recipe(labels~., data = tidy_train) %>%
step_center(all_predictors()) %>%
step_scale(all_predictors())
tidy_prep <- prep(tidy_rec)
tidy_juice <- juice(tidy_prep)
#Set validation to k-folds
tidy_kfolds <- vfold_cv(tidy_train, v = 10)
#Train models
#Establish workflow
wf <- workflow() %>%
add_recipe(tidy_rec)
## Craeate Logistic Regression model
tidy_logistic <- multinom_reg(penalty = tune(), mixture = tune()) %>%
set_mode("classification") %>%
set_engine("glmnet")
## Create Knn model
tidy_knn <- nearest_neighbor(neighbors = tune()) %>%
set_mode("classification") %>%
set_engine("kknn")
#Create Grid for Logistic Regression model
logistic_grid <- grid_regular(penalty(), mixture(), levels = 10)
#Create grid for Knn model
knn_grid <- grid_regular(neighbors(), levels = 10)
#Tune models
#Tune Logistic Regression model
logistic_tune <- tune_grid(
wf %>% add_model(tidy_logistic),
resamples = tidy_kfolds,
grid = logistic_grid
)
#Tune Knn model
knn_tune <- tune_grid(
wf %>% add_model(tidy_knn),
resamples = tidy_kfolds,
grid = knn_grid
)
logistic_tune %>%
collect_metrics() %>%
filter(.metric == "accuracy") %>%
select(penalty, mixture, mean) %>%
pivot_longer(-mean) %>%
ggplot(aes(x = value, y = mean, color = name)) + geom_line() + facet_wrap(~name, scales = "free")
knn_tune %>%
collect_metrics() %>%
filter(.metric == "accuracy") %>%
ggplot(aes(x = neighbors, y = mean)) + geom_line()
tidy_logistic <- finalize_model(tidy_logistic, logistic_tune %>% select_best("accuracy"))
tidy_knn <- finalize_model(tidy_knn, knn_tune %>% select_best("accuracy"))
wf %>% add_model(tidy_logistic) %>% last_fit(tidy_split) %>% collect_metrics()
wf %>% add_model(tidy_knn) %>% last_fit(tidy_split) %>% collect_metrics()
setwd("E:/School/R Work/Tidy Tuesday")
setwd("E:/School/R Work/Tidy Tuesday")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(keras)
library(tidymodels)
mnist_data <- keras::dataset_mnist()
mnist_data$train$x
image_data <- mnist_data$train$x
image_data %>% dim()
28*28
image_data %>% dim()
imabe_labels <- mnist_data$train$y
image_data
image_data %>% dim()
array_reshape(image_data, dim = c(60000, 28*28))
image_data <- array_reshape(image_data, dim = c(60000, 28*28))
image_data <- array_reshape(image_data, dim = c(60000, 28*28))
image_data %>% dim()
image_data <- image_data[1:10000,]
image_labels <- mnist_data$train$y
image_labels <- image_labels[1:10000]
library(Rtsne)
image_data %>% max()
image_data %>% min()
normalize_input(image_data)
image_data <- normalize_input(image_data)
tsne_df <- Rtsne(image_data, perplexity = 25, dims = 3)
tsne_df
tsne_df$Y
library(plotly)
plotly_df <- as_tibble(tsne_df$Y) %>% cbind(image_data)
plotly_df
plotly_df <- as_tibble(tsne_df$Y) %>% cbind(image_labels)
plotly_df
plotly_df <- as_tibble(tsne_df$Y) %>%
cbind(image_labels) %>%
mutate(labels = image_labels %>% as.factor())
plot_ly(plotly_df, x = ~V1, y = ~V2, z = ~V3, color = ~image_labels)
plot_ly(plotly_df, x = ~V1, y = ~V2, z = ~V3, color = ~image_labels) %>%
add_markers()
plot_3d <- plot_ly(plotly_df, x = ~V1, y = ~V2, z = ~V3, color = ~image_labels) %>%
add_markers()
htmlwidgets::saveWidget(plot_3d, file = "tnse_plot.html")
plotly_df <- as_tibble(tsne_df$Y) %>%
cbind(image_labels) %>%
mutate(labels = image_labels) %>%
mutate(labels = as.factor(labels))
plot_3d <- plot_ly(plotly_df, x = ~V1, y = ~V2, z = ~V3, color = ~image_labels) %>%
add_markers()
htmlwidgets::saveWidget(plot_3d, file = "tnse_plot.html")
plotly_df
plot_3d <- plot_ly(plotly_df, x = ~V1, y = ~V2, z = ~V3, color = ~labels) %>%
add_markers()
htmlwidgets::saveWidget(plot_3d, file = "tnse_plot.html")
plotly_df %>%
select(-image_labels)
model_data <- plotly_df %>% select(-image_labels)
model_data
model_data
tidy_split <- initial_split(model_data, prop = .8)
tidy_train <- training(tidy_split)
tidy_test <- testing(tidy_split)
model_data %>% summary()
model_data
#Create a recipe for pre-processing
tidy_rec <- recipe(labels~., data = tidy_train) %>%
step_center(all_predictors()) %>%
step_scale(all_predictors())
tidy_prep <- prep(tidy_rec)
tidy_prep
tidy_juice <- juice(tidy_rec)
tidy_juice <- juice(tidy_prep)
tidy_juice
bake(tidy_prep, tidy_test)
bake(tidy_prep, tidy_train)
#Training models
wf <- workflow() %>%
add_recipe(tidy_rec)
wf
tidy_knn <- nearest_neighbor(neighbors = tune()) %>%
set_mode("classification") %>%
set_engine("kknn")
tidy_train %>% count(labels)
#Create a baseline model
tidy_logistic <- multinom_reg(penalty = tune(), mixture = tune()) %>%
set_mode("classification") %>%
set_engine("glmnet")
#Knn grid
knn_grid <- grid_regular(neighbors(), levels = 10)
knn_grid
#Baseline grid
logistic_grid <- grid_regular(penalty(), mixture(), levels = 10)
tidy_kfolds <- vfold_cv(tidy_train, v = 10)
#Create k-folds dataset
tidy_kfolds <- vfold_cv(tidy_train, v = 10)
logistic_tune <- tune_grid(
wf %>% add_model(tidy_logistic),
resamples = tidy_kfolds,
grid = logistic_grid
)
knn_tune <- tune_grid(
wf %>% add_model(tidy_knn),
resamples = tidy_kfolds,
grid = knn_grid
)
logistic_tune %>% collect_metrics()
logistic_tune %>% collect_metrics() %>% arrange(mean)
logistic_tune %>% collect_metrics() %>% arrange(desc(mean))
logistic_tune %>% collect_metrics()
logistic_tune %>%
collect_metrics() %>%
ggplot(aes(x = penalty, y = mixture, color = mean)) + geom_point() + facet_wrap(~.metric, scales = "free")
logistic_tune %>%
collect_metrics()
logistic_tune %>%
collect_metrics() %>%
select(penalty, mixture, .metric, mean)) %>%
logistic_tune %>%
collect_metrics() %>%
select(penalty, mixture, .metric, mean))
logistic_tune %>%
collect_metrics() %>%
select(penalty, mixture, .metric, mean)
logistic_tune %>%
collect_metrics() %>%
select(penalty, mixture, .metric, mean) %>%
pivot_longer(-.metric)
logistic_tune %>%
collect_metrics() %>%
select(penalty, mixture, .metric, mean) %>%
pivot_longer(-.metric) %>%
ggplot(aes(x = name, y = value)) + geom_line() + facet_wrap(~.metric, scales = "free")
logistic_tune %>%
collect_metrics() %>%
select(penalty, mixture, .metric, mean) %>%
pivot_longer(-.metric)
logistic_tune %>%
collect_metrics() %>%
select(penalty, mixture, .metric, mean) %>%
pivot_longer(-mean) %>%
ggplot(aes(x = name, y = value)) + geom_line() + facet_wrap(~.metric, scales = "free")
logistic_tune %>%
collect_metrics() %>%
select(penalty, mixture, .metric, mean) %>%
pivot_longer(-mean)
logistic_tune %>%
collect_metrics() %>%
select(penalty, mixture, .metric, mean) %>%
pivot_longer(-mean)
logistic_tune %>%
collect_metrics() %>%
select(penalty, mixture, .metric, mean)
logistic_tune %>%
collect_metrics() %>%
select(penalty, mixture, .metric, mean) %>%
pivot_longer(-mean)
logistic_tune %>% collect_metrics()
logistic_tune %>%
collect_metrics() %>%
filter(.metric == "accuracy")
logistic_tune %>%
collect_metrics() %>%
filter(.metric == "accuracy") %>%
select(penalty, mixture, mean)
logistic_tune %>%
collect_metrics() %>%
filter(.metric == "accuracy") %>%
select(penalty, mixture, mean) %>%
ggplot(aes(x = penalty, y = mixture, color = mean)) + geom_point()
logistic_tune %>%
collect_metrics() %>%
filter(.metric == "accuracy") %>%
select(penalty, mixture, mean) %>%
pivot_longer(-mean)
logistic_tune %>%
collect_metrics() %>%
filter(.metric == "accuracy") %>%
select(penalty, mixture, mean) %>%
pivot_longer(-mean) %>%
ggplot(aes(x = name, y = value)) + geom_line() + facet_wrap(~name, scales = "free")
logistic_tune %>%
collect_metrics() %>%
filter(.metric == "accuracy") %>%
select(penalty, mixture, mean) %>%
pivot_longer(-mean) %>%
ggplot(aes(x = value, y = mean)) + geom_line() + facet_wrap(~name, scales = "free")
knn_tune %>%
collect_metrics()
knn_tune %>%
collect_metrics() %>%
filter(.metric == "accuracy") %>%
ggplot(aes(x = neighbors, y = mean)) + geom_line()
knn_tune %>%
collect_metrics()
#Create new models with final parameters
tidy_logistic <- finalize_model(tidy_logistic, logistic_tune %>% select_best("accuracy"))
tidy_knn <- finalize_model(tidy_knn, knn_tune %>% select_best("accuracy"))
#Create new models with final parameters
tidy_logistic <- finalize_model(tidy_logistic, logistic_tune %>% select_best("accuracy"))
tidy_knn <- finalize_model(tidy_knn, knn_tune %>% select_best("accuracy"))
tidy_logistic
tidy_kfolds
tidy_logistic
tidy_kfolds
tidy_knn
tidy_logistic
tidy_knn
wf %>% add_model(tidy_logistic) %>% last_fit(tidy_split) %>% collect_metrics()
wf %>% add_model(tidy_knn) %>% last_fit(tidy_split) %>% collect_metrics()
